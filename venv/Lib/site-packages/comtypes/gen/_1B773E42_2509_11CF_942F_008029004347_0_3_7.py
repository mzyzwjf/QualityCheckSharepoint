# -*- coding: mbcs -*-
typelib_path = 'C:\\Windows\\system32\\sysmon.ocx'
_lcid = 0 # change this if required
from ctypes import *
from comtypes import GUID
from comtypes import CoClass
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import wireHWND
from ctypes.wintypes import MSG
from comtypes import BSTR
from ctypes.wintypes import VARIANT_BOOL
from comtypes.automation import VARIANT
from comtypes import dispid
from comtypes import DISPMETHOD, DISPPROPERTY, helpstring
from ctypes.wintypes import SIZE
from ctypes import HRESULT
from comtypes import helpstring
from comtypes import COMMETHOD
WSTRING = c_wchar_p
UINT_PTR = c_ulonglong
from ctypes.wintypes import POINT
LONG_PTR = c_longlong
from ctypes.wintypes import RECT
from comtypes import IUnknown
from comtypes.automation import VARIANT



# values for enumeration 'DisplayTypeConstants'
sysmonLineGraph = 1
sysmonHistogram = 2
sysmonReport = 3
sysmonChartArea = 4
sysmonChartStackedArea = 5
DisplayTypeConstants = c_int # enum
class SystemMonitor2(CoClass):
    u'System Monitor interface 2'
    _reg_clsid_ = GUID('{7F30578C-5F38-4612-ACFE-6ED04C7B7AF8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
class ISystemMonitor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Definition of interface ISystemMonitor'
    _iid_ = GUID('{194EB241-C32C-11CF-9398-00AA00A3DDEA}')
    _idlflags_ = ['hidden']
class ISystemMonitor2(ISystemMonitor):
    _case_insensitive_ = True
    u'Definition of interface SystemMonitor2'
    _iid_ = GUID('{08E3206A-5FD2-4FDE-A8A5-8CB3B63D2677}')
    _idlflags_ = []
SystemMonitor2._com_interfaces_ = [ISystemMonitor2]

class GraphPropPage(CoClass):
    _reg_clsid_ = GUID('{C3E5D3D3-1A03-11CF-942D-008029004347}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
class IPropertyPage(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{B196B28D-BAB4-101A-B69C-00AA00341D07}')
    _idlflags_ = []
class IPropertyPage2(IPropertyPage):
    _case_insensitive_ = True
    _iid_ = GUID('{01E44665-24AC-101B-84ED-08002B2EC713}')
    _idlflags_ = []
GraphPropPage._com_interfaces_ = [IPropertyPage2]

class SourcePropPage(CoClass):
    _reg_clsid_ = GUID('{0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
SourcePropPage._com_interfaces_ = [IPropertyPage2]

class LogFiles(CoClass):
    u'System Monitor Log File Collection Type Information'
    _reg_clsid_ = GUID('{2735D9FD-F6B9-4F19-A5D9-E2D068584BC5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
class ILogFiles(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Log file collection'
    _iid_ = GUID('{6A2A97E6-6851-41EA-87AD-2A8225335865}')
    _idlflags_ = ['dual', 'oleautomation', 'hidden']
LogFiles._com_interfaces_ = [ILogFiles]

class AppearPropPage(CoClass):
    _reg_clsid_ = GUID('{E49741E9-93A8-4AB1-8E96-BF4482282E9C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
AppearPropPage._com_interfaces_ = [IPropertyPage2]

class DICounterItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Definition of dispinterface DICounterItem'
    _iid_ = GUID('{C08C4FF2-0E2E-11CF-942C-008029004347}')
    _idlflags_ = ['hidden']
    _methods_ = []

# values for enumeration 'SysmonDataType'
sysmonDataAvg = 1
sysmonDataMin = 2
sysmonDataMax = 3
sysmonDataTime = 4
sysmonDataCount = 5
SysmonDataType = c_int # enum
DICounterItem._disp_methods_ = [
    DISPMETHOD([dispid(0), helpstring(u'Current value.'), 'propget'], c_double, 'Value'),
    DISPMETHOD([dispid(1), helpstring(u'Color.'), 'propput'], None, 'Color',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(1), helpstring(u'Color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'Color'),
    DISPMETHOD([dispid(2), helpstring(u'Width.'), 'propput'], None, 'Width',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(2), helpstring(u'Width.'), 'propget'], c_int, 'Width'),
    DISPMETHOD([dispid(3), helpstring(u'Line style.'), 'propput'], None, 'LineStyle',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(3), helpstring(u'Line style.'), 'propget'], c_int, 'LineStyle'),
    DISPMETHOD([dispid(4), helpstring(u'Scale factor.'), 'propput'], None, 'ScaleFactor',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(4), helpstring(u'Scale factor.'), 'propget'], c_int, 'ScaleFactor'),
    DISPMETHOD([dispid(5), 'propget'], BSTR, 'Path'),
    DISPMETHOD([dispid(1610678282)], None, 'GetValue',
               ( ['out'], POINTER(c_double), 'Value' ),
               ( ['out'], POINTER(c_int), 'Status' )),
    DISPMETHOD([dispid(1610678283)], None, 'GetStatistics',
               ( ['out'], POINTER(c_double), 'Max' ),
               ( ['out'], POINTER(c_double), 'Min' ),
               ( ['out'], POINTER(c_double), 'Avg' ),
               ( ['out'], POINTER(c_int), 'Status' )),
    DISPMETHOD([dispid(8), helpstring(u'Selected.'), 'propput'], None, 'Selected',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(8), helpstring(u'Selected.'), 'propget'], VARIANT_BOOL, 'Selected'),
    DISPMETHOD([dispid(9), helpstring(u'Visible.'), 'propput'], None, 'Visible',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(9), helpstring(u'Visible.'), 'propget'], VARIANT_BOOL, 'Visible'),
    DISPMETHOD([dispid(10), helpstring(u'Get the data at a specific data point.')], None, 'GetDataAt',
               ( ['in'], c_int, 'iIndex' ),
               ( ['in'], SysmonDataType, 'iWhich' ),
               ( ['out'], POINTER(VARIANT), 'pVariant' )),
]
class _ICounterItemUnion(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{DE1A6B74-9182-4C41-8E2C-24C2CD30EE83}')
    _idlflags_ = ['hidden']
_ICounterItemUnion._methods_ = [
    COMMETHOD(['propget', helpstring(u'Current value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(c_double), 'pdblValue' )),
    COMMETHOD(['propput', helpstring(u'Color.')], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'Color.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Width.')], HRESULT, 'Width',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Width.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propput', helpstring(u'Line style.')], HRESULT, 'LineStyle',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Line style.')], HRESULT, 'LineStyle',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propput', helpstring(u'Scale factor.')], HRESULT, 'ScaleFactor',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Scale factor.')], HRESULT, 'ScaleFactor',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propget'], HRESULT, 'Path',
              ( ['retval', 'out'], POINTER(BSTR), 'pstrValue' )),
    COMMETHOD([], HRESULT, 'GetValue',
              ( ['out'], POINTER(c_double), 'Value' ),
              ( ['out'], POINTER(c_int), 'Status' )),
    COMMETHOD([], HRESULT, 'GetStatistics',
              ( ['out'], POINTER(c_double), 'Max' ),
              ( ['out'], POINTER(c_double), 'Min' ),
              ( ['out'], POINTER(c_double), 'Avg' ),
              ( ['out'], POINTER(c_int), 'Status' )),
    COMMETHOD(['propput', helpstring(u'Selected.')], HRESULT, 'Selected',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Selected.')], HRESULT, 'Selected',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD([helpstring(u'Get the data at a specific data point.')], HRESULT, 'GetDataAt',
              ( ['in'], c_int, 'iIndex' ),
              ( ['in'], SysmonDataType, 'iWhich' ),
              ( ['out'], POINTER(VARIANT), 'pVariant' )),
]
################################################################
## code template for _ICounterItemUnion implementation
##class _ICounterItemUnion_Impl(object):
##    def GetDataAt(self, iIndex, iWhich):
##        u'Get the data at a specific data point.'
##        #return pVariant
##
##    def _get(self):
##        u'Visible.'
##        #return pbState
##    def _set(self, pbState):
##        u'Visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color.'
##        #return pColor
##    def _set(self, pColor):
##        u'Color.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Scale factor.'
##        #return piValue
##    def _set(self, piValue):
##        u'Scale factor.'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Selected.'
##        #return pbState
##    def _set(self, pbState):
##        u'Selected.'
##    Selected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Value(self):
##        u'Current value.'
##        #return pdblValue
##
##    def GetValue(self):
##        '-no docstring-'
##        #return Value, Status
##
##    def _get(self):
##        u'Width.'
##        #return piValue
##    def _set(self, piValue):
##        u'Width.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Path(self):
##        '-no docstring-'
##        #return pstrValue
##
##    def _get(self):
##        u'Line style.'
##        #return piValue
##    def _set(self, piValue):
##        u'Line style.'
##    LineStyle = property(_get, _set, doc = _set.__doc__)
##
##    def GetStatistics(self):
##        '-no docstring-'
##        #return Max, Min, Avg, Status
##

class CounterItem2(CoClass):
    u'System Monitor Counter Item Type Information 2'
    _reg_clsid_ = GUID('{43196C62-C31F-4CE3-A02E-79EFE0F6A525}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
class ICounterItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Definition of interface ICounterItem'
    _iid_ = GUID('{771A9520-EE28-11CE-941E-008029004347}')
    _idlflags_ = ['hidden']
class ICounterItem2(ICounterItem):
    _case_insensitive_ = True
    u'Definition of interface ICounterItem2'
    _iid_ = GUID('{EEFCD4E1-EA1C-4435-B7F4-E341BA03B4F9}')
    _idlflags_ = []
CounterItem2._com_interfaces_ = [ICounterItem2]

class PROPPAGEINFO(Structure):
    pass
PROPPAGEINFO._fields_ = [
    ('cb', c_ulong),
    ('pszTitle', WSTRING),
    ('SIZE', SIZE),
    ('pszDocString', WSTRING),
    ('pszHelpFile', WSTRING),
    ('dwHelpContext', c_ulong),
]
assert sizeof(PROPPAGEINFO) == 48, sizeof(PROPPAGEINFO)
assert alignment(PROPPAGEINFO) == 8, alignment(PROPPAGEINFO)
class ICounters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Counter collection'
    _iid_ = GUID('{79167962-28FC-11CF-942F-008029004347}')
    _idlflags_ = ['dual', 'oleautomation', 'hidden']

# values for enumeration 'ReportValueTypeConstants'
sysmonDefaultValue = 0
sysmonCurrentValue = 1
sysmonAverage = 2
sysmonMinimum = 3
sysmonMaximum = 4
ReportValueTypeConstants = c_int # enum

# values for enumeration 'DataSourceTypeConstants'
sysmonNullDataSource = -1
sysmonCurrentActivity = 1
sysmonLogFiles = 2
sysmonSqlLog = 3
DataSourceTypeConstants = c_int # enum
ISystemMonitor._methods_ = [
    COMMETHOD(['propget', helpstring(u'The appearance.')], HRESULT, 'Appearance',
              ( ['retval', 'out'], POINTER(c_int), 'iAppearance' )),
    COMMETHOD(['propput', helpstring(u'The appearance.')], HRESULT, 'Appearance',
              ( ['in'], c_int, 'iAppearance' )),
    COMMETHOD(['propget', helpstring(u'The background color.')], HRESULT, 'BackColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The background color.')], HRESULT, 'BackColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'The border style.')], HRESULT, 'BorderStyle',
              ( ['retval', 'out'], POINTER(c_int), 'iBorderStyle' )),
    COMMETHOD(['propput', helpstring(u'The border style.')], HRESULT, 'BorderStyle',
              ( ['in'], c_int, 'iBorderStyle' )),
    COMMETHOD(['propget', helpstring(u'The foreground color.')], HRESULT, 'ForeColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The foreground color.')], HRESULT, 'ForeColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'The font for all text.')], HRESULT, 'Font',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'ppFont' )),
    COMMETHOD(['propputref', helpstring(u'The font for all text.')], HRESULT, 'Font',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'ppFont' )),
    COMMETHOD(['propget', helpstring(u'The counter collection.')], HRESULT, 'Counters',
              ( ['retval', 'out'], POINTER(POINTER(ICounters)), 'ppICounters' )),
    COMMETHOD(['propput', helpstring(u'Show vertical grid.')], HRESULT, 'ShowVerticalGrid',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show vertical grid.')], HRESULT, 'ShowVerticalGrid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show horizontal grid.')], HRESULT, 'ShowHorizontalGrid',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show horizontal grid.')], HRESULT, 'ShowHorizontalGrid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show counters legend.')], HRESULT, 'ShowLegend',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show counters legend.')], HRESULT, 'ShowLegend',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show scale labels.')], HRESULT, 'ShowScaleLabels',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show scale labels.')], HRESULT, 'ShowScaleLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show value bar.')], HRESULT, 'ShowValueBar',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show value bar.')], HRESULT, 'ShowValueBar',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Maximum scale value.')], HRESULT, 'MaximumScale',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Maximum scale value.')], HRESULT, 'MaximumScale',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propput', helpstring(u'Minimum scale value.')], HRESULT, 'MinimumScale',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Minimum scale value.')], HRESULT, 'MinimumScale',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propput', helpstring(u'Data sample interval.')], HRESULT, 'UpdateInterval',
              ( ['in'], c_float, 'pfValue' )),
    COMMETHOD(['propget', helpstring(u'Data sample interval.')], HRESULT, 'UpdateInterval',
              ( ['retval', 'out'], POINTER(c_float), 'pfValue' )),
    COMMETHOD(['propput', helpstring(u'Display type.')], HRESULT, 'DisplayType',
              ( ['in'], DisplayTypeConstants, 'peDisplayType' )),
    COMMETHOD(['propget', helpstring(u'Display type.')], HRESULT, 'DisplayType',
              ( ['retval', 'out'], POINTER(DisplayTypeConstants), 'peDisplayType' )),
    COMMETHOD(['propput', helpstring(u'Manual update.')], HRESULT, 'ManualUpdate',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Manual update.')], HRESULT, 'ManualUpdate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Graph title.')], HRESULT, 'GraphTitle',
              ( ['in'], BSTR, 'pbsTitle' )),
    COMMETHOD(['propget', helpstring(u'Graph title.')], HRESULT, 'GraphTitle',
              ( ['retval', 'out'], POINTER(BSTR), 'pbsTitle' )),
    COMMETHOD(['propput', helpstring(u'Y axis label.')], HRESULT, 'YAxisLabel',
              ( ['in'], BSTR, 'pbsTitle' )),
    COMMETHOD(['propget', helpstring(u'Y axis label.')], HRESULT, 'YAxisLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'pbsTitle' )),
    COMMETHOD([helpstring(u'Collect sample for each counter.')], HRESULT, 'CollectSample'),
    COMMETHOD([helpstring(u'Apply visual changes to graph.')], HRESULT, 'UpdateGraph'),
    COMMETHOD([helpstring(u'Display counter browser.')], HRESULT, 'BrowseCounters'),
    COMMETHOD([helpstring(u'Display properties.')], HRESULT, 'DisplayProperties'),
    COMMETHOD(['hidden'], HRESULT, 'Counter',
              ( ['in'], c_int, 'iIndex' ),
              ( ['out'], POINTER(POINTER(ICounterItem)), 'ppICounter' )),
    COMMETHOD(['hidden'], HRESULT, 'AddCounter',
              ( ['in'], BSTR, 'bsPath' ),
              ( ['out'], POINTER(POINTER(ICounterItem)), 'ppICounter' )),
    COMMETHOD(['hidden'], HRESULT, 'DeleteCounter',
              ( ['in'], POINTER(ICounterItem), 'pCtr' )),
    COMMETHOD(['propget', helpstring(u'Control panel background color.')], HRESULT, 'BackColorCtl',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Control panel background color.')], HRESULT, 'BackColorCtl',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Log file name.')], HRESULT, 'LogFileName',
              ( ['in'], BSTR, 'bsFileName' )),
    COMMETHOD(['propget', helpstring(u'Log file name.')], HRESULT, 'LogFileName',
              ( ['retval', 'out'], POINTER(BSTR), 'bsFileName' )),
    COMMETHOD(['propput', helpstring(u'Start time of log file view.')], HRESULT, 'LogViewStart',
              ( ['in'], c_double, 'StartTime' )),
    COMMETHOD(['propget', helpstring(u'Start time of log file view.')], HRESULT, 'LogViewStart',
              ( ['retval', 'out'], POINTER(c_double), 'StartTime' )),
    COMMETHOD(['propput', helpstring(u'Stop time of log file view.')], HRESULT, 'LogViewStop',
              ( ['in'], c_double, 'StopTime' )),
    COMMETHOD(['propget', helpstring(u'Stop time of log file view.')], HRESULT, 'LogViewStop',
              ( ['retval', 'out'], POINTER(c_double), 'StopTime' )),
    COMMETHOD(['propget', helpstring(u'Graph grid color.')], HRESULT, 'GridColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Graph grid color.')], HRESULT, 'GridColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'Graph time bar color.')], HRESULT, 'TimeBarColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Graph time bar color.')], HRESULT, 'TimeBarColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'Highlight the selected counter..')], HRESULT, 'Highlight',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Highlight the selected counter..')], HRESULT, 'Highlight',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show the toolbar')], HRESULT, 'ShowToolbar',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show the toolbar')], HRESULT, 'ShowToolbar',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD([helpstring(u'Paste Counters from clipboard.')], HRESULT, 'Paste'),
    COMMETHOD([helpstring(u'Copy Counters to clipboard.')], HRESULT, 'Copy'),
    COMMETHOD([helpstring(u'Delete all counters in the control.')], HRESULT, 'Reset'),
    COMMETHOD(['propput', helpstring(u'Disallow property modifications.')], HRESULT, 'ReadOnly',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Disallow property modifications.')], HRESULT, 'ReadOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Report value.')], HRESULT, 'ReportValueType',
              ( ['in'], ReportValueTypeConstants, 'peReportValueType' )),
    COMMETHOD(['propget', helpstring(u'Report value.')], HRESULT, 'ReportValueType',
              ( ['retval', 'out'], POINTER(ReportValueTypeConstants), 'peReportValueType' )),
    COMMETHOD(['propput', helpstring(u'Allow monitoring of duplicate counter instances.')], HRESULT, 'MonitorDuplicateInstances',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Allow monitoring of duplicate counter instances.')], HRESULT, 'MonitorDuplicateInstances',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Number of samples per display interval.')], HRESULT, 'DisplayFilter',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Number of samples per display interval.')], HRESULT, 'DisplayFilter',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propget', helpstring(u'The log file collection.')], HRESULT, 'LogFiles',
              ( ['retval', 'out'], POINTER(POINTER(ILogFiles)), 'ppILogFiles' )),
    COMMETHOD(['propput', helpstring(u'Data source type.')], HRESULT, 'DataSourceType',
              ( ['in'], DataSourceTypeConstants, 'peDataSourceType' )),
    COMMETHOD(['propget', helpstring(u'Data source type.')], HRESULT, 'DataSourceType',
              ( ['retval', 'out'], POINTER(DataSourceTypeConstants), 'peDataSourceType' )),
    COMMETHOD(['propput', helpstring(u'SQL DSN name.')], HRESULT, 'SqlDsnName',
              ( ['in'], BSTR, 'bsSqlDsnName' )),
    COMMETHOD(['propget', helpstring(u'SQL DSN name.')], HRESULT, 'SqlDsnName',
              ( ['retval', 'out'], POINTER(BSTR), 'bsSqlDsnName' )),
    COMMETHOD(['propput', helpstring(u'SQL logset name.')], HRESULT, 'SqlLogSetName',
              ( ['in'], BSTR, 'bsSqlLogSetName' )),
    COMMETHOD(['propget', helpstring(u'SQL logset name.')], HRESULT, 'SqlLogSetName',
              ( ['retval', 'out'], POINTER(BSTR), 'bsSqlLogSetName' )),
]
################################################################
## code template for ISystemMonitor implementation
##class ISystemMonitor_Impl(object):
##    def _get(self):
##        u'SQL DSN name.'
##        #return bsSqlDsnName
##    def _set(self, bsSqlDsnName):
##        u'SQL DSN name.'
##    SqlDsnName = property(_get, _set, doc = _set.__doc__)
##
##    def CollectSample(self):
##        u'Collect sample for each counter.'
##        #return 
##
##    def _get(self):
##        u'Show scale labels.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show scale labels.'
##    ShowScaleLabels = property(_get, _set, doc = _set.__doc__)
##
##    def AddCounter(self, bsPath):
##        '-no docstring-'
##        #return ppICounter
##
##    def _get(self):
##        u'Log file name.'
##        #return bsFileName
##    def _set(self, bsFileName):
##        u'Log file name.'
##    LogFileName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Start time of log file view.'
##        #return StartTime
##    def _set(self, StartTime):
##        u'Start time of log file view.'
##    LogViewStart = property(_get, _set, doc = _set.__doc__)
##
##    def DisplayProperties(self):
##        u'Display properties.'
##        #return 
##
##    def _get(self):
##        u'The border style.'
##        #return iBorderStyle
##    def _set(self, iBorderStyle):
##        u'The border style.'
##    BorderStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Stop time of log file view.'
##        #return StopTime
##    def _set(self, StopTime):
##        u'Stop time of log file view.'
##    LogViewStop = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Counters(self):
##        u'The counter collection.'
##        #return ppICounters
##
##    def _get(self):
##        u'Show counters legend.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show counters legend.'
##    ShowLegend = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Disallow property modifications.'
##        #return pbState
##    def _set(self, pbState):
##        u'Disallow property modifications.'
##    ReadOnly = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LogFiles(self):
##        u'The log file collection.'
##        #return ppILogFiles
##
##    def _get(self):
##        u'The foreground color.'
##        #return pColor
##    def _set(self, pColor):
##        u'The foreground color.'
##    ForeColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The background color.'
##        #return pColor
##    def _set(self, pColor):
##        u'The background color.'
##    BackColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data source type.'
##        #return peDataSourceType
##    def _set(self, peDataSourceType):
##        u'Data source type.'
##    DataSourceType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show horizontal grid.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show horizontal grid.'
##    ShowHorizontalGrid = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'SQL logset name.'
##        #return bsSqlLogSetName
##    def _set(self, bsSqlLogSetName):
##        u'SQL logset name.'
##    SqlLogSetName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Graph time bar color.'
##        #return pColor
##    def _set(self, pColor):
##        u'Graph time bar color.'
##    TimeBarColor = property(_get, _set, doc = _set.__doc__)
##
##    def Paste(self):
##        u'Paste Counters from clipboard.'
##        #return 
##
##    def _get(self):
##        u'Control panel background color.'
##        #return pColor
##    def _set(self, pColor):
##        u'Control panel background color.'
##    BackColorCtl = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Allow monitoring of duplicate counter instances.'
##        #return pbState
##    def _set(self, pbState):
##        u'Allow monitoring of duplicate counter instances.'
##    MonitorDuplicateInstances = property(_get, _set, doc = _set.__doc__)
##
##    def Reset(self):
##        u'Delete all counters in the control.'
##        #return 
##
##    def _get(self):
##        u'Number of samples per display interval.'
##        #return piValue
##    def _set(self, piValue):
##        u'Number of samples per display interval.'
##    DisplayFilter = property(_get, _set, doc = _set.__doc__)
##
##    def Counter(self, iIndex):
##        '-no docstring-'
##        #return ppICounter
##
##    def _get(self):
##        u'The appearance.'
##        #return iAppearance
##    def _set(self, iAppearance):
##        u'The appearance.'
##    Appearance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum scale value.'
##        #return piValue
##    def _set(self, piValue):
##        u'Minimum scale value.'
##    MinimumScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Display type.'
##        #return peDisplayType
##    def _set(self, peDisplayType):
##        u'Display type.'
##    DisplayType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Graph grid color.'
##        #return pColor
##    def _set(self, pColor):
##        u'Graph grid color.'
##    GridColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Report value.'
##        #return peReportValueType
##    def _set(self, peReportValueType):
##        u'Report value.'
##    ReportValueType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Highlight the selected counter..'
##        #return pbState
##    def _set(self, pbState):
##        u'Highlight the selected counter..'
##    Highlight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data sample interval.'
##        #return pfValue
##    def _set(self, pfValue):
##        u'Data sample interval.'
##    UpdateInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Manual update.'
##        #return pbState
##    def _set(self, pbState):
##        u'Manual update.'
##    ManualUpdate = property(_get, _set, doc = _set.__doc__)
##
##    def Copy(self):
##        u'Copy Counters to clipboard.'
##        #return 
##
##    def BrowseCounters(self):
##        u'Display counter browser.'
##        #return 
##
##    def _get(self):
##        u'Maximum scale value.'
##        #return piValue
##    def _set(self, piValue):
##        u'Maximum scale value.'
##    MaximumScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show value bar.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show value bar.'
##    ShowValueBar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Y axis label.'
##        #return pbsTitle
##    def _set(self, pbsTitle):
##        u'Y axis label.'
##    YAxisLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show vertical grid.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show vertical grid.'
##    ShowVerticalGrid = property(_get, _set, doc = _set.__doc__)
##
##    def DeleteCounter(self, pCtr):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        u'Show the toolbar'
##        #return pbState
##    def _set(self, pbState):
##        u'Show the toolbar'
##    ShowToolbar = property(_get, _set, doc = _set.__doc__)
##
##    def UpdateGraph(self):
##        u'Apply visual changes to graph.'
##        #return 
##
##    def Font(self, ppFont):
##        u'The font for all text.'
##        #return 
##
##    def _get(self):
##        u'Graph title.'
##        #return pbsTitle
##    def _set(self, pbsTitle):
##        u'Graph title.'
##    GraphTitle = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'SysmonFileType'
sysmonFileHtml = 1
sysmonFileReport = 2
sysmonFileCsv = 3
sysmonFileTsv = 4
sysmonFileBlg = 5
sysmonFileRetiredBlg = 6
sysmonFileGif = 7
SysmonFileType = c_int # enum

# values for enumeration 'SysmonBatchReason'
sysmonBatchNone = 0
sysmonBatchAddFiles = 1
sysmonBatchAddCounters = 2
sysmonBatchAddFilesAutoCounters = 3
SysmonBatchReason = c_int # enum
ISystemMonitor2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Show digit grouping in displayed values.')], HRESULT, 'EnableDigitGrouping',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show digit grouping in displayed values.')], HRESULT, 'EnableDigitGrouping',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Enable tooltips in the view.')], HRESULT, 'EnableToolTips',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Enable tooltips in the view.')], HRESULT, 'EnableToolTips',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show time axis labels in the chart.')], HRESULT, 'ShowTimeAxisLabels',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show time axis labels in the chart.')], HRESULT, 'ShowTimeAxisLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Put chart into scroll/wrap style.')], HRESULT, 'ChartScroll',
              ( ['in'], VARIANT_BOOL, 'pbScroll' )),
    COMMETHOD(['propget', helpstring(u'Put chart into scroll/wrap style.')], HRESULT, 'ChartScroll',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbScroll' )),
    COMMETHOD(['propput', helpstring(u'Number of data points displayed.')], HRESULT, 'DataPointCount',
              ( ['in'], c_int, 'piDataPointCount' )),
    COMMETHOD(['propget', helpstring(u'Number of data points displayed.')], HRESULT, 'DataPointCount',
              ( ['retval', 'out'], POINTER(c_int), 'piDataPointCount' )),
    COMMETHOD([helpstring(u'Modify scale factors of selected counters to fit in the display.')], HRESULT, 'ScaleToFit',
              ( [], VARIANT_BOOL, 'bSelectedCountersOnly' )),
    COMMETHOD([helpstring(u'Save to files.')], HRESULT, 'SaveAs',
              ( [], BSTR, 'bstrFileName' ),
              ( [], SysmonFileType, 'eSysmonFileType' )),
    COMMETHOD([helpstring(u'Relog a log file.')], HRESULT, 'Relog',
              ( [], BSTR, 'bstrFileName' ),
              ( [], SysmonFileType, 'eSysmonFileType' ),
              ( [], c_int, 'iFilter' )),
    COMMETHOD([helpstring(u'Remove all data from the control.')], HRESULT, 'ClearData'),
    COMMETHOD(['propget'], HRESULT, 'LogSourceStartTime',
              ( ['out'], POINTER(c_double), 'pDate' )),
    COMMETHOD(['propget'], HRESULT, 'LogSourceStopTime',
              ( ['out'], POINTER(c_double), 'pDate' )),
    COMMETHOD([helpstring(u'Time range of view.')], HRESULT, 'SetLogViewRange',
              ( ['in'], c_double, 'StartTime' ),
              ( ['in'], c_double, 'StopTime' )),
    COMMETHOD([], HRESULT, 'GetLogViewRange',
              ( ['out'], POINTER(c_double), 'StartTime' ),
              ( ['out'], POINTER(c_double), 'StopTime' )),
    COMMETHOD([], HRESULT, 'BatchingLock',
              ( ['in'], VARIANT_BOOL, 'fLock' ),
              ( ['in'], SysmonBatchReason, 'eBatchReason' )),
    COMMETHOD([helpstring(u'Load settings from an HTML file.')], HRESULT, 'LoadSettings',
              ( ['in'], BSTR, 'bstrSettingFileName' )),
]
################################################################
## code template for ISystemMonitor2 implementation
##class ISystemMonitor2_Impl(object):
##    def _get(self):
##        u'Number of data points displayed.'
##        #return piDataPointCount
##    def _set(self, piDataPointCount):
##        u'Number of data points displayed.'
##    DataPointCount = property(_get, _set, doc = _set.__doc__)
##
##    def ClearData(self):
##        u'Remove all data from the control.'
##        #return 
##
##    def SaveAs(self, bstrFileName, eSysmonFileType):
##        u'Save to files.'
##        #return 
##
##    def _get(self):
##        u'Show time axis labels in the chart.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show time axis labels in the chart.'
##    ShowTimeAxisLabels = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LogSourceStopTime(self):
##        '-no docstring-'
##        #return pDate
##
##    @property
##    def LogSourceStartTime(self):
##        '-no docstring-'
##        #return pDate
##
##    def ScaleToFit(self, bSelectedCountersOnly):
##        u'Modify scale factors of selected counters to fit in the display.'
##        #return 
##
##    def BatchingLock(self, fLock, eBatchReason):
##        '-no docstring-'
##        #return 
##
##    def Relog(self, bstrFileName, eSysmonFileType, iFilter):
##        u'Relog a log file.'
##        #return 
##
##    def _get(self):
##        u'Enable tooltips in the view.'
##        #return pbState
##    def _set(self, pbState):
##        u'Enable tooltips in the view.'
##    EnableToolTips = property(_get, _set, doc = _set.__doc__)
##
##    def GetLogViewRange(self):
##        '-no docstring-'
##        #return StartTime, StopTime
##
##    def LoadSettings(self, bstrSettingFileName):
##        u'Load settings from an HTML file.'
##        #return 
##
##    def _get(self):
##        u'Put chart into scroll/wrap style.'
##        #return pbScroll
##    def _set(self, pbScroll):
##        u'Put chart into scroll/wrap style.'
##    ChartScroll = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show digit grouping in displayed values.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show digit grouping in displayed values.'
##    EnableDigitGrouping = property(_get, _set, doc = _set.__doc__)
##
##    def SetLogViewRange(self, StartTime, StopTime):
##        u'Time range of view.'
##        #return 
##

class GeneralPropPage(CoClass):
    _reg_clsid_ = GUID('{C3E5D3D2-1A03-11CF-942D-008029004347}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
GeneralPropPage._com_interfaces_ = [IPropertyPage2]

class DISystemMonitorEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'System Monitor Events'
    _iid_ = GUID('{84979930-4AB3-11CF-943A-008029004347}')
    _idlflags_ = []
    _methods_ = []
DISystemMonitorEvents._disp_methods_ = [
    DISPMETHOD([dispid(1), helpstring(u'A counter was selected.')], None, 'OnCounterSelected',
               ( ['in'], c_int, 'iIndex' )),
    DISPMETHOD([dispid(2), helpstring(u'A counter was added.')], None, 'OnCounterAdded',
               ( ['in'], c_int, 'iIndex' )),
    DISPMETHOD([dispid(3), helpstring(u'A counter was deleted.')], None, 'OnCounterDeleted',
               ( ['in'], c_int, 'iIndex' )),
    DISPMETHOD([dispid(4), helpstring(u'A sample of all counter values was collected.')], None, 'OnSampleCollected'),
    DISPMETHOD([dispid(5), helpstring(u'The left mouse button was double clicked.')], None, 'OnDblClick',
               ( ['in'], c_int, 'index' )),
]
class CounterPropPage(CoClass):
    _reg_clsid_ = GUID('{CF948561-EDE8-11CE-941E-008029004347}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
CounterPropPage._com_interfaces_ = [IPropertyPage2]

class ILogFileItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Definition of interface ILogFileItem'
    _iid_ = GUID('{D6B518DD-05C7-418A-89E6-4F9CE8C6841E}')
    _idlflags_ = ['hidden']
ILogFileItem._methods_ = [
    COMMETHOD(['propget', helpstring(u'Log file path.')], HRESULT, 'Path',
              ( ['retval', 'out'], POINTER(BSTR), 'pstrValue' )),
]
################################################################
## code template for ILogFileItem implementation
##class ILogFileItem_Impl(object):
##    @property
##    def Path(self):
##        u'Log file path.'
##        #return pstrValue
##

class SystemMonitor(CoClass):
    u'System Monitor Control Type Information'
    _reg_clsid_ = GUID('{C4D2D8E0-D1DD-11CE-940F-008029004347}')
    _idlflags_ = ['control']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
class DISystemMonitor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Definition of dispinterface DISystemMonitor'
    _iid_ = GUID('{13D73D81-C32E-11CF-9398-00AA00A3DDEA}')
    _idlflags_ = ['hidden']
    _methods_ = []
SystemMonitor._com_interfaces_ = [DISystemMonitor, ISystemMonitor]
SystemMonitor._outgoing_interfaces_ = [DISystemMonitorEvents]

ICounterItem._methods_ = [
    COMMETHOD(['propget', helpstring(u'Current value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(c_double), 'pdblValue' )),
    COMMETHOD(['propput', helpstring(u'Color.')], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'Color.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Width.')], HRESULT, 'Width',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Width.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propput', helpstring(u'Line style.')], HRESULT, 'LineStyle',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Line style.')], HRESULT, 'LineStyle',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propput', helpstring(u'Scale factor.')], HRESULT, 'ScaleFactor',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Scale factor.')], HRESULT, 'ScaleFactor',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propget'], HRESULT, 'Path',
              ( ['retval', 'out'], POINTER(BSTR), 'pstrValue' )),
    COMMETHOD([], HRESULT, 'GetValue',
              ( ['out'], POINTER(c_double), 'Value' ),
              ( ['out'], POINTER(c_int), 'Status' )),
    COMMETHOD([], HRESULT, 'GetStatistics',
              ( ['out'], POINTER(c_double), 'Max' ),
              ( ['out'], POINTER(c_double), 'Min' ),
              ( ['out'], POINTER(c_double), 'Avg' ),
              ( ['out'], POINTER(c_int), 'Status' )),
]
################################################################
## code template for ICounterItem implementation
##class ICounterItem_Impl(object):
##    def _get(self):
##        u'Color.'
##        #return pColor
##    def _set(self, pColor):
##        u'Color.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Scale factor.'
##        #return piValue
##    def _set(self, piValue):
##        u'Scale factor.'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Value(self):
##        u'Current value.'
##        #return pdblValue
##
##    def GetValue(self):
##        '-no docstring-'
##        #return Value, Status
##
##    def _get(self):
##        u'Width.'
##        #return piValue
##    def _set(self, piValue):
##        u'Width.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Path(self):
##        '-no docstring-'
##        #return pstrValue
##
##    def _get(self):
##        u'Line style.'
##        #return piValue
##    def _set(self, piValue):
##        u'Line style.'
##    LineStyle = property(_get, _set, doc = _set.__doc__)
##
##    def GetStatistics(self):
##        '-no docstring-'
##        #return Max, Min, Avg, Status
##

class Library(object):
    u'System Monitor Control'
    name = u'SystemMonitor'
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)

class LogFileItem(CoClass):
    u'System Monitor Log File Item Type Information'
    _reg_clsid_ = GUID('{16EC5BE8-DF93-4237-94E4-9EE918111D71}')
    _idlflags_ = ['control']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
class DILogFileItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Definition of dispinterface DILogFileItem'
    _iid_ = GUID('{8D093FFC-F777-4917-82D1-833FBC54C58F}')
    _idlflags_ = ['hidden']
    _methods_ = []
LogFileItem._com_interfaces_ = [DILogFileItem, ILogFileItem]

DILogFileItem._disp_methods_ = [
    DISPMETHOD([dispid(0), helpstring(u'Log file path.'), 'propget'], BSTR, 'Path'),
]
ILogFiles._methods_ = [
    COMMETHOD([dispid(1610743808), 'propget'], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pLong' )),
    COMMETHOD([dispid(-4), 'restricted', 'propget'], HRESULT, '_NewEnum',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppIunk' )),
    COMMETHOD([dispid(0), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(DILogFileItem)), 'ppI' )),
    COMMETHOD([dispid(1610743811)], HRESULT, 'Add',
              ( ['in'], BSTR, 'pathname' ),
              ( ['retval', 'out'], POINTER(POINTER(DILogFileItem)), 'ppI' )),
    COMMETHOD([dispid(1610743812)], HRESULT, 'Remove',
              ( ['in'], VARIANT, 'index' )),
]
################################################################
## code template for ILogFiles implementation
##class ILogFiles_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pLong
##
##    @property
##    def Item(self, index):
##        '-no docstring-'
##        #return ppI
##
##    def Add(self, pathname):
##        '-no docstring-'
##        #return ppI
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppIunk
##
##    def Remove(self, index):
##        '-no docstring-'
##        #return 
##

class ISystemMonitorEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'System Monitor Events'
    _iid_ = GUID('{EE660EA0-4ABD-11CF-943A-008029004347}')
    _idlflags_ = []
ISystemMonitorEvents._methods_ = [
    COMMETHOD([helpstring(u'A counter was selected.')], None, 'OnCounterSelected',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'A counter was added.')], None, 'OnCounterAdded',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'A counter was deleted.')], None, 'OnCounterDeleted',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'A sample of all counter values was collected.')], None, 'OnSampleCollected'),
    COMMETHOD([helpstring(u'The left mouse button was double clicked.')], None, 'OnDblClick',
              ( ['in'], c_int, 'index' )),
]
################################################################
## code template for ISystemMonitorEvents implementation
##class ISystemMonitorEvents_Impl(object):
##    def OnCounterDeleted(self, index):
##        u'A counter was deleted.'
##        #return 
##
##    def OnCounterSelected(self, index):
##        u'A counter was selected.'
##        #return 
##
##    def OnDblClick(self, index):
##        u'The left mouse button was double clicked.'
##        #return 
##
##    def OnSampleCollected(self):
##        u'A sample of all counter values was collected.'
##        #return 
##
##    def OnCounterAdded(self, index):
##        u'A counter was added.'
##        #return 
##

class _ISystemMonitorUnion(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{C8A77338-265F-4DE5-AA25-C7DA1CE5A8F4}')
    _idlflags_ = ['hidden']
_ISystemMonitorUnion._methods_ = [
    COMMETHOD(['propget', helpstring(u'The appearance.')], HRESULT, 'Appearance',
              ( ['retval', 'out'], POINTER(c_int), 'iAppearance' )),
    COMMETHOD(['propput', helpstring(u'The appearance.')], HRESULT, 'Appearance',
              ( ['in'], c_int, 'iAppearance' )),
    COMMETHOD(['propget', helpstring(u'The background color.')], HRESULT, 'BackColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The background color.')], HRESULT, 'BackColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'The border style.')], HRESULT, 'BorderStyle',
              ( ['retval', 'out'], POINTER(c_int), 'iBorderStyle' )),
    COMMETHOD(['propput', helpstring(u'The border style.')], HRESULT, 'BorderStyle',
              ( ['in'], c_int, 'iBorderStyle' )),
    COMMETHOD(['propget', helpstring(u'The foreground color.')], HRESULT, 'ForeColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The foreground color.')], HRESULT, 'ForeColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'The font for all text.')], HRESULT, 'Font',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'ppFont' )),
    COMMETHOD(['propputref', helpstring(u'The font for all text.')], HRESULT, 'Font',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'ppFont' )),
    COMMETHOD(['propget', helpstring(u'The counter collection.')], HRESULT, 'Counters',
              ( ['retval', 'out'], POINTER(POINTER(ICounters)), 'ppICounters' )),
    COMMETHOD(['propput', helpstring(u'Show vertical grid.')], HRESULT, 'ShowVerticalGrid',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show vertical grid.')], HRESULT, 'ShowVerticalGrid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show horizontal grid.')], HRESULT, 'ShowHorizontalGrid',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show horizontal grid.')], HRESULT, 'ShowHorizontalGrid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show counters legend.')], HRESULT, 'ShowLegend',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show counters legend.')], HRESULT, 'ShowLegend',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show scale labels.')], HRESULT, 'ShowScaleLabels',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show scale labels.')], HRESULT, 'ShowScaleLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show value bar.')], HRESULT, 'ShowValueBar',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show value bar.')], HRESULT, 'ShowValueBar',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Maximum scale value.')], HRESULT, 'MaximumScale',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Maximum scale value.')], HRESULT, 'MaximumScale',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propput', helpstring(u'Minimum scale value.')], HRESULT, 'MinimumScale',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Minimum scale value.')], HRESULT, 'MinimumScale',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propput', helpstring(u'Data sample interval.')], HRESULT, 'UpdateInterval',
              ( ['in'], c_float, 'pfValue' )),
    COMMETHOD(['propget', helpstring(u'Data sample interval.')], HRESULT, 'UpdateInterval',
              ( ['retval', 'out'], POINTER(c_float), 'pfValue' )),
    COMMETHOD(['propput', helpstring(u'Display type.')], HRESULT, 'DisplayType',
              ( ['in'], DisplayTypeConstants, 'peDisplayType' )),
    COMMETHOD(['propget', helpstring(u'Display type.')], HRESULT, 'DisplayType',
              ( ['retval', 'out'], POINTER(DisplayTypeConstants), 'peDisplayType' )),
    COMMETHOD(['propput', helpstring(u'Manual update.')], HRESULT, 'ManualUpdate',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Manual update.')], HRESULT, 'ManualUpdate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Graph title.')], HRESULT, 'GraphTitle',
              ( ['in'], BSTR, 'pbsTitle' )),
    COMMETHOD(['propget', helpstring(u'Graph title.')], HRESULT, 'GraphTitle',
              ( ['retval', 'out'], POINTER(BSTR), 'pbsTitle' )),
    COMMETHOD(['propput', helpstring(u'Y axis label.')], HRESULT, 'YAxisLabel',
              ( ['in'], BSTR, 'pbsTitle' )),
    COMMETHOD(['propget', helpstring(u'Y axis label.')], HRESULT, 'YAxisLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'pbsTitle' )),
    COMMETHOD([helpstring(u'Collect sample for each counter.')], HRESULT, 'CollectSample'),
    COMMETHOD([helpstring(u'Apply visual changes to graph.')], HRESULT, 'UpdateGraph'),
    COMMETHOD([helpstring(u'Display counter browser.')], HRESULT, 'BrowseCounters'),
    COMMETHOD([helpstring(u'Display properties.')], HRESULT, 'DisplayProperties'),
    COMMETHOD(['hidden'], HRESULT, 'Counter',
              ( ['in'], c_int, 'iIndex' ),
              ( ['out'], POINTER(POINTER(ICounterItem)), 'ppICounter' )),
    COMMETHOD(['hidden'], HRESULT, 'AddCounter',
              ( ['in'], BSTR, 'bsPath' ),
              ( ['out'], POINTER(POINTER(ICounterItem)), 'ppICounter' )),
    COMMETHOD(['hidden'], HRESULT, 'DeleteCounter',
              ( ['in'], POINTER(ICounterItem), 'pCtr' )),
    COMMETHOD(['propget', helpstring(u'Control panel background color.')], HRESULT, 'BackColorCtl',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Control panel background color.')], HRESULT, 'BackColorCtl',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Log file name.')], HRESULT, 'LogFileName',
              ( ['in'], BSTR, 'bsFileName' )),
    COMMETHOD(['propget', helpstring(u'Log file name.')], HRESULT, 'LogFileName',
              ( ['retval', 'out'], POINTER(BSTR), 'bsFileName' )),
    COMMETHOD(['propput', helpstring(u'Start time of log file view.')], HRESULT, 'LogViewStart',
              ( ['in'], c_double, 'StartTime' )),
    COMMETHOD(['propget', helpstring(u'Start time of log file view.')], HRESULT, 'LogViewStart',
              ( ['retval', 'out'], POINTER(c_double), 'StartTime' )),
    COMMETHOD(['propput', helpstring(u'Stop time of log file view.')], HRESULT, 'LogViewStop',
              ( ['in'], c_double, 'StopTime' )),
    COMMETHOD(['propget', helpstring(u'Stop time of log file view.')], HRESULT, 'LogViewStop',
              ( ['retval', 'out'], POINTER(c_double), 'StopTime' )),
    COMMETHOD(['propget', helpstring(u'Graph grid color.')], HRESULT, 'GridColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Graph grid color.')], HRESULT, 'GridColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'Graph time bar color.')], HRESULT, 'TimeBarColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Graph time bar color.')], HRESULT, 'TimeBarColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'Highlight the selected counter..')], HRESULT, 'Highlight',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Highlight the selected counter..')], HRESULT, 'Highlight',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show the toolbar')], HRESULT, 'ShowToolbar',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show the toolbar')], HRESULT, 'ShowToolbar',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD([helpstring(u'Paste Counters from clipboard.')], HRESULT, 'Paste'),
    COMMETHOD([helpstring(u'Copy Counters to clipboard.')], HRESULT, 'Copy'),
    COMMETHOD([helpstring(u'Delete all counters in the control.')], HRESULT, 'Reset'),
    COMMETHOD(['propput', helpstring(u'Disallow property modifications.')], HRESULT, 'ReadOnly',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Disallow property modifications.')], HRESULT, 'ReadOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Report value.')], HRESULT, 'ReportValueType',
              ( ['in'], ReportValueTypeConstants, 'peReportValueType' )),
    COMMETHOD(['propget', helpstring(u'Report value.')], HRESULT, 'ReportValueType',
              ( ['retval', 'out'], POINTER(ReportValueTypeConstants), 'peReportValueType' )),
    COMMETHOD(['propput', helpstring(u'Allow monitoring of duplicate counter instances.')], HRESULT, 'MonitorDuplicateInstances',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Allow monitoring of duplicate counter instances.')], HRESULT, 'MonitorDuplicateInstances',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Number of samples per display interval.')], HRESULT, 'DisplayFilter',
              ( ['in'], c_int, 'piValue' )),
    COMMETHOD(['propget', helpstring(u'Number of samples per display interval.')], HRESULT, 'DisplayFilter',
              ( ['retval', 'out'], POINTER(c_int), 'piValue' )),
    COMMETHOD(['propget', helpstring(u'The log file collection.')], HRESULT, 'LogFiles',
              ( ['retval', 'out'], POINTER(POINTER(ILogFiles)), 'ppILogFiles' )),
    COMMETHOD(['propput', helpstring(u'Data source type.')], HRESULT, 'DataSourceType',
              ( ['in'], DataSourceTypeConstants, 'peDataSourceType' )),
    COMMETHOD(['propget', helpstring(u'Data source type.')], HRESULT, 'DataSourceType',
              ( ['retval', 'out'], POINTER(DataSourceTypeConstants), 'peDataSourceType' )),
    COMMETHOD(['propput', helpstring(u'SQL DSN name.')], HRESULT, 'SqlDsnName',
              ( ['in'], BSTR, 'bsSqlDsnName' )),
    COMMETHOD(['propget', helpstring(u'SQL DSN name.')], HRESULT, 'SqlDsnName',
              ( ['retval', 'out'], POINTER(BSTR), 'bsSqlDsnName' )),
    COMMETHOD(['propput', helpstring(u'SQL logset name.')], HRESULT, 'SqlLogSetName',
              ( ['in'], BSTR, 'bsSqlLogSetName' )),
    COMMETHOD(['propget', helpstring(u'SQL logset name.')], HRESULT, 'SqlLogSetName',
              ( ['retval', 'out'], POINTER(BSTR), 'bsSqlLogSetName' )),
    COMMETHOD(['propput', helpstring(u'Show digit grouping in displayed values.')], HRESULT, 'EnableDigitGrouping',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show digit grouping in displayed values.')], HRESULT, 'EnableDigitGrouping',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Enable tooltips in the view.')], HRESULT, 'EnableToolTips',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Enable tooltips in the view.')], HRESULT, 'EnableToolTips',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Show time axis labels in the chart.')], HRESULT, 'ShowTimeAxisLabels',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Show time axis labels in the chart.')], HRESULT, 'ShowTimeAxisLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Put chart into scroll/wrap style.')], HRESULT, 'ChartScroll',
              ( ['in'], VARIANT_BOOL, 'pbScroll' )),
    COMMETHOD(['propget', helpstring(u'Put chart into scroll/wrap style.')], HRESULT, 'ChartScroll',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbScroll' )),
    COMMETHOD(['propput', helpstring(u'Number of data points displayed.')], HRESULT, 'DataPointCount',
              ( ['in'], c_int, 'piDataPointCount' )),
    COMMETHOD(['propget', helpstring(u'Number of data points displayed.')], HRESULT, 'DataPointCount',
              ( ['retval', 'out'], POINTER(c_int), 'piDataPointCount' )),
    COMMETHOD([helpstring(u'Modify scale factors of selected counters to fit in the display.')], HRESULT, 'ScaleToFit',
              ( [], VARIANT_BOOL, 'bSelectedCountersOnly' )),
    COMMETHOD([helpstring(u'Save to files.')], HRESULT, 'SaveAs',
              ( [], BSTR, 'bstrFileName' ),
              ( [], SysmonFileType, 'eSysmonFileType' )),
    COMMETHOD([helpstring(u'Relog a log file.')], HRESULT, 'Relog',
              ( [], BSTR, 'bstrFileName' ),
              ( [], SysmonFileType, 'eSysmonFileType' ),
              ( [], c_int, 'iFilter' )),
    COMMETHOD([helpstring(u'Remove all data from the control.')], HRESULT, 'ClearData'),
    COMMETHOD(['propget'], HRESULT, 'LogSourceStartTime',
              ( ['out'], POINTER(c_double), 'pDate' )),
    COMMETHOD(['propget'], HRESULT, 'LogSourceStopTime',
              ( ['out'], POINTER(c_double), 'pDate' )),
    COMMETHOD([helpstring(u'Time range of view.')], HRESULT, 'SetLogViewRange',
              ( ['in'], c_double, 'StartTime' ),
              ( ['in'], c_double, 'StopTime' )),
    COMMETHOD([], HRESULT, 'GetLogViewRange',
              ( ['out'], POINTER(c_double), 'StartTime' ),
              ( ['out'], POINTER(c_double), 'StopTime' )),
    COMMETHOD([], HRESULT, 'BatchingLock',
              ( ['in'], VARIANT_BOOL, 'fLock' ),
              ( ['in'], SysmonBatchReason, 'eBatchReason' )),
    COMMETHOD([helpstring(u'Load settings from an HTML file.')], HRESULT, 'LoadSettings',
              ( ['in'], BSTR, 'bstrSettingFileName' )),
]
################################################################
## code template for _ISystemMonitorUnion implementation
##class _ISystemMonitorUnion_Impl(object):
##    def _get(self):
##        u'SQL DSN name.'
##        #return bsSqlDsnName
##    def _set(self, bsSqlDsnName):
##        u'SQL DSN name.'
##    SqlDsnName = property(_get, _set, doc = _set.__doc__)
##
##    def CollectSample(self):
##        u'Collect sample for each counter.'
##        #return 
##
##    def _get(self):
##        u'Show time axis labels in the chart.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show time axis labels in the chart.'
##    ShowTimeAxisLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show scale labels.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show scale labels.'
##    ShowScaleLabels = property(_get, _set, doc = _set.__doc__)
##
##    def AddCounter(self, bsPath):
##        '-no docstring-'
##        #return ppICounter
##
##    def _get(self):
##        u'Log file name.'
##        #return bsFileName
##    def _set(self, bsFileName):
##        u'Log file name.'
##    LogFileName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Start time of log file view.'
##        #return StartTime
##    def _set(self, StartTime):
##        u'Start time of log file view.'
##    LogViewStart = property(_get, _set, doc = _set.__doc__)
##
##    def DisplayProperties(self):
##        u'Display properties.'
##        #return 
##
##    def _get(self):
##        u'The border style.'
##        #return iBorderStyle
##    def _set(self, iBorderStyle):
##        u'The border style.'
##    BorderStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Stop time of log file view.'
##        #return StopTime
##    def _set(self, StopTime):
##        u'Stop time of log file view.'
##    LogViewStop = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Counters(self):
##        u'The counter collection.'
##        #return ppICounters
##
##    def _get(self):
##        u'Number of data points displayed.'
##        #return piDataPointCount
##    def _set(self, piDataPointCount):
##        u'Number of data points displayed.'
##    DataPointCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show counters legend.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show counters legend.'
##    ShowLegend = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Disallow property modifications.'
##        #return pbState
##    def _set(self, pbState):
##        u'Disallow property modifications.'
##    ReadOnly = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show digit grouping in displayed values.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show digit grouping in displayed values.'
##    EnableDigitGrouping = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LogFiles(self):
##        u'The log file collection.'
##        #return ppILogFiles
##
##    def BatchingLock(self, fLock, eBatchReason):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        u'The foreground color.'
##        #return pColor
##    def _set(self, pColor):
##        u'The foreground color.'
##    ForeColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Enable tooltips in the view.'
##        #return pbState
##    def _set(self, pbState):
##        u'Enable tooltips in the view.'
##    EnableToolTips = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The background color.'
##        #return pColor
##    def _set(self, pColor):
##        u'The background color.'
##    BackColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data source type.'
##        #return peDataSourceType
##    def _set(self, peDataSourceType):
##        u'Data source type.'
##    DataSourceType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show horizontal grid.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show horizontal grid.'
##    ShowHorizontalGrid = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'SQL logset name.'
##        #return bsSqlLogSetName
##    def _set(self, bsSqlLogSetName):
##        u'SQL logset name.'
##    SqlLogSetName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Graph time bar color.'
##        #return pColor
##    def _set(self, pColor):
##        u'Graph time bar color.'
##    TimeBarColor = property(_get, _set, doc = _set.__doc__)
##
##    def Paste(self):
##        u'Paste Counters from clipboard.'
##        #return 
##
##    def _get(self):
##        u'Control panel background color.'
##        #return pColor
##    def _set(self, pColor):
##        u'Control panel background color.'
##    BackColorCtl = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Allow monitoring of duplicate counter instances.'
##        #return pbState
##    def _set(self, pbState):
##        u'Allow monitoring of duplicate counter instances.'
##    MonitorDuplicateInstances = property(_get, _set, doc = _set.__doc__)
##
##    def Reset(self):
##        u'Delete all counters in the control.'
##        #return 
##
##    def LoadSettings(self, bstrSettingFileName):
##        u'Load settings from an HTML file.'
##        #return 
##
##    def _get(self):
##        u'Number of samples per display interval.'
##        #return piValue
##    def _set(self, piValue):
##        u'Number of samples per display interval.'
##    DisplayFilter = property(_get, _set, doc = _set.__doc__)
##
##    def ClearData(self):
##        u'Remove all data from the control.'
##        #return 
##
##    def SaveAs(self, bstrFileName, eSysmonFileType):
##        u'Save to files.'
##        #return 
##
##    def Counter(self, iIndex):
##        '-no docstring-'
##        #return ppICounter
##
##    def _get(self):
##        u'The appearance.'
##        #return iAppearance
##    def _set(self, iAppearance):
##        u'The appearance.'
##    Appearance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum scale value.'
##        #return piValue
##    def _set(self, piValue):
##        u'Minimum scale value.'
##    MinimumScale = property(_get, _set, doc = _set.__doc__)
##
##    def ScaleToFit(self, bSelectedCountersOnly):
##        u'Modify scale factors of selected counters to fit in the display.'
##        #return 
##
##    def _get(self):
##        u'Display type.'
##        #return peDisplayType
##    def _set(self, peDisplayType):
##        u'Display type.'
##    DisplayType = property(_get, _set, doc = _set.__doc__)
##
##    def Relog(self, bstrFileName, eSysmonFileType, iFilter):
##        u'Relog a log file.'
##        #return 
##
##    def _get(self):
##        u'Graph grid color.'
##        #return pColor
##    def _set(self, pColor):
##        u'Graph grid color.'
##    GridColor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LogSourceStartTime(self):
##        '-no docstring-'
##        #return pDate
##
##    def _get(self):
##        u'Report value.'
##        #return peReportValueType
##    def _set(self, peReportValueType):
##        u'Report value.'
##    ReportValueType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Put chart into scroll/wrap style.'
##        #return pbScroll
##    def _set(self, pbScroll):
##        u'Put chart into scroll/wrap style.'
##    ChartScroll = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Highlight the selected counter..'
##        #return pbState
##    def _set(self, pbState):
##        u'Highlight the selected counter..'
##    Highlight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data sample interval.'
##        #return pfValue
##    def _set(self, pfValue):
##        u'Data sample interval.'
##    UpdateInterval = property(_get, _set, doc = _set.__doc__)
##
##    def SetLogViewRange(self, StartTime, StopTime):
##        u'Time range of view.'
##        #return 
##
##    def _get(self):
##        u'Manual update.'
##        #return pbState
##    def _set(self, pbState):
##        u'Manual update.'
##    ManualUpdate = property(_get, _set, doc = _set.__doc__)
##
##    def Copy(self):
##        u'Copy Counters to clipboard.'
##        #return 
##
##    def BrowseCounters(self):
##        u'Display counter browser.'
##        #return 
##
##    def _get(self):
##        u'Maximum scale value.'
##        #return piValue
##    def _set(self, piValue):
##        u'Maximum scale value.'
##    MaximumScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show value bar.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show value bar.'
##    ShowValueBar = property(_get, _set, doc = _set.__doc__)
##
##    def GetLogViewRange(self):
##        '-no docstring-'
##        #return StartTime, StopTime
##
##    def _get(self):
##        u'Y axis label.'
##        #return pbsTitle
##    def _set(self, pbsTitle):
##        u'Y axis label.'
##    YAxisLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show vertical grid.'
##        #return pbState
##    def _set(self, pbState):
##        u'Show vertical grid.'
##    ShowVerticalGrid = property(_get, _set, doc = _set.__doc__)
##
##    def DeleteCounter(self, pCtr):
##        '-no docstring-'
##        #return 
##
##    @property
##    def LogSourceStopTime(self):
##        '-no docstring-'
##        #return pDate
##
##    def _get(self):
##        u'Show the toolbar'
##        #return pbState
##    def _set(self, pbState):
##        u'Show the toolbar'
##    ShowToolbar = property(_get, _set, doc = _set.__doc__)
##
##    def UpdateGraph(self):
##        u'Apply visual changes to graph.'
##        #return 
##
##    def Font(self, ppFont):
##        u'The font for all text.'
##        #return 
##
##    def _get(self):
##        u'Graph title.'
##        #return pbsTitle
##    def _set(self, pbsTitle):
##        u'Graph title.'
##    GraphTitle = property(_get, _set, doc = _set.__doc__)
##

class CounterItem(CoClass):
    u'System Monitor Counter Item Type Information'
    _reg_clsid_ = GUID('{C4D2D8E0-D1DD-11CE-940F-008029004348}')
    _idlflags_ = ['control']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
CounterItem._com_interfaces_ = [DICounterItem, ICounterItem]

class IPropertyPageSite(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{B196B28C-BAB4-101A-B69C-00AA00341D07}')
    _idlflags_ = []
IPropertyPageSite._methods_ = [
    COMMETHOD([], HRESULT, 'OnStatusChange',
              ( ['in'], c_ulong, 'dwFlags' )),
    COMMETHOD([], HRESULT, 'GetLocaleID',
              ( ['out'], POINTER(c_ulong), 'pLocaleID' )),
    COMMETHOD([], HRESULT, 'GetPageContainer',
              ( ['out'], POINTER(POINTER(IUnknown)), 'ppUnk' )),
    COMMETHOD([], HRESULT, 'TranslateAccelerator',
              ( ['in'], POINTER(MSG), 'pMsg' )),
]
################################################################
## code template for IPropertyPageSite implementation
##class IPropertyPageSite_Impl(object):
##    def GetLocaleID(self):
##        '-no docstring-'
##        #return pLocaleID
##
##    def OnStatusChange(self, dwFlags):
##        '-no docstring-'
##        #return 
##
##    def GetPageContainer(self):
##        '-no docstring-'
##        #return ppUnk
##
##    def TranslateAccelerator(self, pMsg):
##        '-no docstring-'
##        #return 
##

class DISystemMonitorInternal(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Definition of dispinterface DISystemMonitorInternal`'
    _iid_ = GUID('{194EB242-C32C-11CF-9398-00AA00A3DDEA}')
    _idlflags_ = ['hidden']
    _methods_ = []
DISystemMonitorInternal._disp_methods_ = [
    DISPMETHOD([dispid(-520), helpstring(u'The appearance.'), 'propget'], c_int, 'Appearance'),
    DISPMETHOD([dispid(-520), helpstring(u'The appearance.'), 'propput'], None, 'Appearance',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(-501), helpstring(u'The background color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'BackColor'),
    DISPMETHOD([dispid(-501), helpstring(u'The background color.'), 'propput'], None, 'BackColor',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(-504), helpstring(u'The border style.'), 'propget'], c_int, 'BorderStyle'),
    DISPMETHOD([dispid(-504), helpstring(u'The border style.'), 'propput'], None, 'BorderStyle',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(-513), helpstring(u'The foreground color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'ForeColor'),
    DISPMETHOD([dispid(-513), helpstring(u'The foreground color.'), 'propput'], None, 'ForeColor',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(-512), helpstring(u'The font for all text.'), 'propget'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font'),
    DISPMETHOD([dispid(-512), helpstring(u'The font for all text.'), 'propputref'], None, 'Font',
               ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'rhs' )),
    DISPMETHOD([dispid(0), helpstring(u'The counter collection.'), 'propget'], POINTER(ICounters), 'Counters'),
    DISPMETHOD([dispid(1), helpstring(u'Show vertical grid.'), 'propput'], None, 'ShowVerticalGrid',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(1), helpstring(u'Show vertical grid.'), 'propget'], VARIANT_BOOL, 'ShowVerticalGrid'),
    DISPMETHOD([dispid(2), helpstring(u'Show horizontal grid.'), 'propput'], None, 'ShowHorizontalGrid',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(2), helpstring(u'Show horizontal grid.'), 'propget'], VARIANT_BOOL, 'ShowHorizontalGrid'),
    DISPMETHOD([dispid(3), helpstring(u'Show counters legend.'), 'propput'], None, 'ShowLegend',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(3), helpstring(u'Show counters legend.'), 'propget'], VARIANT_BOOL, 'ShowLegend'),
    DISPMETHOD([dispid(4), helpstring(u'Show scale labels.'), 'propput'], None, 'ShowScaleLabels',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(4), helpstring(u'Show scale labels.'), 'propget'], VARIANT_BOOL, 'ShowScaleLabels'),
    DISPMETHOD([dispid(5), helpstring(u'Show value bar.'), 'propput'], None, 'ShowValueBar',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(5), helpstring(u'Show value bar.'), 'propget'], VARIANT_BOOL, 'ShowValueBar'),
    DISPMETHOD([dispid(6), helpstring(u'Maximum scale value.'), 'propput'], None, 'MaximumScale',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(6), helpstring(u'Maximum scale value.'), 'propget'], c_int, 'MaximumScale'),
    DISPMETHOD([dispid(7), helpstring(u'Minimum scale value.'), 'propput'], None, 'MinimumScale',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(7), helpstring(u'Minimum scale value.'), 'propget'], c_int, 'MinimumScale'),
    DISPMETHOD([dispid(8), helpstring(u'Data sample interval.'), 'propput'], None, 'UpdateInterval',
               ( ['in'], c_float, 'rhs' )),
    DISPMETHOD([dispid(8), helpstring(u'Data sample interval.'), 'propget'], c_float, 'UpdateInterval'),
    DISPMETHOD([dispid(9), helpstring(u'Display type.'), 'propput'], None, 'DisplayType',
               ( ['in'], DisplayTypeConstants, 'rhs' )),
    DISPMETHOD([dispid(9), helpstring(u'Display type.'), 'propget'], DisplayTypeConstants, 'DisplayType'),
    DISPMETHOD([dispid(16), helpstring(u'Manual update.'), 'propput'], None, 'ManualUpdate',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(16), helpstring(u'Manual update.'), 'propget'], VARIANT_BOOL, 'ManualUpdate'),
    DISPMETHOD([dispid(17), helpstring(u'Graph title.'), 'propput'], None, 'GraphTitle',
               ( ['in'], BSTR, 'rhs' )),
    DISPMETHOD([dispid(17), helpstring(u'Graph title.'), 'propget'], BSTR, 'GraphTitle'),
    DISPMETHOD([dispid(18), helpstring(u'Y axis label.'), 'propput'], None, 'YAxisLabel',
               ( ['in'], BSTR, 'rhs' )),
    DISPMETHOD([dispid(18), helpstring(u'Y axis label.'), 'propget'], BSTR, 'YAxisLabel'),
    DISPMETHOD([dispid(20), helpstring(u'Collect sample for each counter.')], None, 'CollectSample'),
    DISPMETHOD([dispid(21), helpstring(u'Apply visual changes to graph.')], None, 'UpdateGraph'),
    DISPMETHOD([dispid(22), helpstring(u'Display counter browser.')], None, 'BrowseCounters'),
    DISPMETHOD([dispid(23), helpstring(u'Display properties.')], None, 'DisplayProperties'),
    DISPMETHOD([dispid(24), 'hidden'], None, 'Counter',
               ( ['in'], c_int, 'iIndex' ),
               ( ['out'], POINTER(POINTER(ICounterItem)), 'ppICounter' )),
    DISPMETHOD([dispid(25), 'hidden'], None, 'AddCounter',
               ( ['in'], BSTR, 'bsPath' ),
               ( ['out'], POINTER(POINTER(ICounterItem)), 'ppICounter' )),
    DISPMETHOD([dispid(32), 'hidden'], None, 'DeleteCounter',
               ( ['in'], POINTER(ICounterItem), 'pCtr' )),
    DISPMETHOD([dispid(33), helpstring(u'Control panel background color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'BackColorCtl'),
    DISPMETHOD([dispid(33), helpstring(u'Control panel background color.'), 'propput'], None, 'BackColorCtl',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(34), helpstring(u'Log file name.'), 'propput'], None, 'LogFileName',
               ( ['in'], BSTR, 'rhs' )),
    DISPMETHOD([dispid(34), helpstring(u'Log file name.'), 'propget'], BSTR, 'LogFileName'),
    DISPMETHOD([dispid(35), helpstring(u'Start time of log file view.'), 'propput'], None, 'LogViewStart',
               ( ['in'], c_double, 'rhs' )),
    DISPMETHOD([dispid(35), helpstring(u'Start time of log file view.'), 'propget'], c_double, 'LogViewStart'),
    DISPMETHOD([dispid(36), helpstring(u'Stop time of log file view.'), 'propput'], None, 'LogViewStop',
               ( ['in'], c_double, 'rhs' )),
    DISPMETHOD([dispid(36), helpstring(u'Stop time of log file view.'), 'propget'], c_double, 'LogViewStop'),
    DISPMETHOD([dispid(37), helpstring(u'Graph grid color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'GridColor'),
    DISPMETHOD([dispid(37), helpstring(u'Graph grid color.'), 'propput'], None, 'GridColor',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(38), helpstring(u'Graph time bar color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'TimeBarColor'),
    DISPMETHOD([dispid(38), helpstring(u'Graph time bar color.'), 'propput'], None, 'TimeBarColor',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(39), helpstring(u'Highlight the selected counter..'), 'propget'], VARIANT_BOOL, 'Highlight'),
    DISPMETHOD([dispid(39), helpstring(u'Highlight the selected counter..'), 'propput'], None, 'Highlight',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(40), helpstring(u'Show the toolbar'), 'propget'], VARIANT_BOOL, 'ShowToolbar'),
    DISPMETHOD([dispid(40), helpstring(u'Show the toolbar'), 'propput'], None, 'ShowToolbar',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(41), helpstring(u'Paste Counters from clipboard.')], None, 'Paste'),
    DISPMETHOD([dispid(48), helpstring(u'Copy Counters to clipboard.')], None, 'Copy'),
    DISPMETHOD([dispid(49), helpstring(u'Delete all counters in the control.')], None, 'Reset'),
    DISPMETHOD([dispid(50), helpstring(u'Disallow property modifications.'), 'propput'], None, 'ReadOnly',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(50), helpstring(u'Disallow property modifications.'), 'propget'], VARIANT_BOOL, 'ReadOnly'),
    DISPMETHOD([dispid(51), helpstring(u'Report value.'), 'propput'], None, 'ReportValueType',
               ( ['in'], ReportValueTypeConstants, 'rhs' )),
    DISPMETHOD([dispid(51), helpstring(u'Report value.'), 'propget'], ReportValueTypeConstants, 'ReportValueType'),
    DISPMETHOD([dispid(52), helpstring(u'Allow monitoring of duplicate counter instances.'), 'propput'], None, 'MonitorDuplicateInstances',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(52), helpstring(u'Allow monitoring of duplicate counter instances.'), 'propget'], VARIANT_BOOL, 'MonitorDuplicateInstances'),
    DISPMETHOD([dispid(53), helpstring(u'Number of samples per display interval.'), 'propput'], None, 'DisplayFilter',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(53), helpstring(u'Number of samples per display interval.'), 'propget'], c_int, 'DisplayFilter'),
    DISPMETHOD([dispid(54), helpstring(u'The log file collection.'), 'propget'], POINTER(ILogFiles), 'LogFiles'),
    DISPMETHOD([dispid(55), helpstring(u'Data source type.'), 'propput'], None, 'DataSourceType',
               ( ['in'], DataSourceTypeConstants, 'rhs' )),
    DISPMETHOD([dispid(55), helpstring(u'Data source type.'), 'propget'], DataSourceTypeConstants, 'DataSourceType'),
    DISPMETHOD([dispid(56), helpstring(u'SQL DSN name.'), 'propput'], None, 'SqlDsnName',
               ( ['in'], BSTR, 'rhs' )),
    DISPMETHOD([dispid(56), helpstring(u'SQL DSN name.'), 'propget'], BSTR, 'SqlDsnName'),
    DISPMETHOD([dispid(57), helpstring(u'SQL logset name.'), 'propput'], None, 'SqlLogSetName',
               ( ['in'], BSTR, 'rhs' )),
    DISPMETHOD([dispid(57), helpstring(u'SQL logset name.'), 'propget'], BSTR, 'SqlLogSetName'),
    DISPMETHOD([dispid(58), helpstring(u'Show digit grouping in displayed values.'), 'propput'], None, 'EnableDigitGrouping',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(58), helpstring(u'Show digit grouping in displayed values.'), 'propget'], VARIANT_BOOL, 'EnableDigitGrouping'),
    DISPMETHOD([dispid(59), helpstring(u'Enable tooltips in the view.'), 'propput'], None, 'EnableToolTips',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(59), helpstring(u'Enable tooltips in the view.'), 'propget'], VARIANT_BOOL, 'EnableToolTips'),
    DISPMETHOD([dispid(60), helpstring(u'Show time axis labels in the chart.'), 'propput'], None, 'ShowTimeAxisLabels',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(60), helpstring(u'Show time axis labels in the chart.'), 'propget'], VARIANT_BOOL, 'ShowTimeAxisLabels'),
    DISPMETHOD([dispid(61), helpstring(u'Put chart into scroll/wrap style.'), 'propput'], None, 'ChartScroll',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(61), helpstring(u'Put chart into scroll/wrap style.'), 'propget'], VARIANT_BOOL, 'ChartScroll'),
    DISPMETHOD([dispid(62), helpstring(u'Number of data points displayed.'), 'propput'], None, 'DataPointCount',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(62), helpstring(u'Number of data points displayed.'), 'propget'], c_int, 'DataPointCount'),
    DISPMETHOD([dispid(63), helpstring(u'Modify scale factors of selected counters to fit in the display.')], None, 'ScaleToFit',
               ( [], VARIANT_BOOL, 'bSelectedCountersOnly' )),
    DISPMETHOD([dispid(64), helpstring(u'Save to files.')], None, 'SaveAs',
               ( [], BSTR, 'bstrFileName' ),
               ( [], SysmonFileType, 'eSysmonFileType' )),
    DISPMETHOD([dispid(68), helpstring(u'Relog a log file.')], None, 'Relog',
               ( [], BSTR, 'bstrFileName' ),
               ( [], SysmonFileType, 'eSysmonFileType' ),
               ( [], c_int, 'iFilter' )),
    DISPMETHOD([dispid(65), helpstring(u'Remove all data from the control.')], None, 'ClearData'),
    DISPMETHOD([dispid(66), 'propget'], None, 'LogSourceStartTime',
               ( ['out'], POINTER(c_double), 'pDate' )),
    DISPMETHOD([dispid(67), 'propget'], None, 'LogSourceStopTime',
               ( ['out'], POINTER(c_double), 'pDate' )),
    DISPMETHOD([dispid(70), helpstring(u'Time range of view.')], None, 'SetLogViewRange',
               ( ['in'], c_double, 'StartTime' ),
               ( ['in'], c_double, 'StopTime' )),
    DISPMETHOD([dispid(71)], None, 'GetLogViewRange',
               ( ['out'], POINTER(c_double), 'StartTime' ),
               ( ['out'], POINTER(c_double), 'StopTime' )),
    DISPMETHOD([dispid(72)], None, 'BatchingLock',
               ( ['in'], VARIANT_BOOL, 'fLock' ),
               ( ['in'], SysmonBatchReason, 'eBatchReason' )),
    DISPMETHOD([dispid(73), helpstring(u'Load settings from an HTML file.')], None, 'LoadSettings',
               ( ['in'], BSTR, 'bstrSettingFileName' )),
]
ICounters._methods_ = [
    COMMETHOD([dispid(1610743808), 'propget'], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pLong' )),
    COMMETHOD([dispid(-4), 'restricted', 'propget'], HRESULT, '_NewEnum',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppIunk' )),
    COMMETHOD([dispid(0), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(DICounterItem)), 'ppI' )),
    COMMETHOD([dispid(1610743811)], HRESULT, 'Add',
              ( ['in'], BSTR, 'pathname' ),
              ( ['retval', 'out'], POINTER(POINTER(DICounterItem)), 'ppI' )),
    COMMETHOD([dispid(1610743812)], HRESULT, 'Remove',
              ( ['in'], VARIANT, 'index' )),
]
################################################################
## code template for ICounters implementation
##class ICounters_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return pLong
##
##    @property
##    def Item(self, index):
##        '-no docstring-'
##        #return ppI
##
##    def Add(self, pathname):
##        '-no docstring-'
##        #return ppI
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppIunk
##
##    def Remove(self, index):
##        '-no docstring-'
##        #return 
##

IPropertyPage._methods_ = [
    COMMETHOD([], HRESULT, 'SetPageSite',
              ( ['in'], POINTER(IPropertyPageSite), 'pPageSite' )),
    COMMETHOD([], HRESULT, 'Activate',
              ( ['in'], wireHWND, 'hWndParent' ),
              ( ['in'], POINTER(RECT), 'pRect' ),
              ( ['in'], c_int, 'bModal' )),
    COMMETHOD([], HRESULT, 'Deactivate'),
    COMMETHOD([], HRESULT, 'GetPageInfo',
              ( ['out'], POINTER(PROPPAGEINFO), 'pPageInfo' )),
    COMMETHOD([], HRESULT, 'SetObjects',
              ( ['in'], c_ulong, 'cObjects' ),
              ( ['in'], POINTER(POINTER(IUnknown)), 'ppUnk' )),
    COMMETHOD([], HRESULT, 'Show',
              ( ['in'], c_uint, 'nCmdShow' )),
    COMMETHOD([], HRESULT, 'Move',
              ( ['in'], POINTER(RECT), 'pRect' )),
    COMMETHOD([], HRESULT, 'IsPageDirty'),
    COMMETHOD([], HRESULT, 'Apply'),
    COMMETHOD([], HRESULT, 'Help',
              ( ['in'], WSTRING, 'pszHelpDir' )),
    COMMETHOD([], HRESULT, 'TranslateAccelerator',
              ( ['in'], POINTER(MSG), 'pMsg' )),
]
################################################################
## code template for IPropertyPage implementation
##class IPropertyPage_Impl(object):
##    def IsPageDirty(self):
##        '-no docstring-'
##        #return 
##
##    def Activate(self, hWndParent, pRect, bModal):
##        '-no docstring-'
##        #return 
##
##    def Help(self, pszHelpDir):
##        '-no docstring-'
##        #return 
##
##    def Show(self, nCmdShow):
##        '-no docstring-'
##        #return 
##
##    def Deactivate(self):
##        '-no docstring-'
##        #return 
##
##    def SetPageSite(self, pPageSite):
##        '-no docstring-'
##        #return 
##
##    def TranslateAccelerator(self, pMsg):
##        '-no docstring-'
##        #return 
##
##    def Move(self, pRect):
##        '-no docstring-'
##        #return 
##
##    def Apply(self):
##        '-no docstring-'
##        #return 
##
##    def GetPageInfo(self):
##        '-no docstring-'
##        #return pPageInfo
##
##    def SetObjects(self, cObjects, ppUnk):
##        '-no docstring-'
##        #return 
##

IPropertyPage2._methods_ = [
    COMMETHOD([], HRESULT, 'EditProperty',
              ( ['in'], c_int, 'dispID' )),
]
################################################################
## code template for IPropertyPage2 implementation
##class IPropertyPage2_Impl(object):
##    def EditProperty(self, dispID):
##        '-no docstring-'
##        #return 
##

ICounterItem2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Selected.')], HRESULT, 'Selected',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Selected.')], HRESULT, 'Selected',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD(['propput', helpstring(u'Visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'pbState' )),
    COMMETHOD(['propget', helpstring(u'Visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbState' )),
    COMMETHOD([helpstring(u'Get the data at a specific data point.')], HRESULT, 'GetDataAt',
              ( ['in'], c_int, 'iIndex' ),
              ( ['in'], SysmonDataType, 'iWhich' ),
              ( ['out'], POINTER(VARIANT), 'pVariant' )),
]
################################################################
## code template for ICounterItem2 implementation
##class ICounterItem2_Impl(object):
##    def _get(self):
##        u'Visible.'
##        #return pbState
##    def _set(self, pbState):
##        u'Visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def GetDataAt(self, iIndex, iWhich):
##        u'Get the data at a specific data point.'
##        #return pVariant
##
##    def _get(self):
##        u'Selected.'
##        #return pbState
##    def _set(self, pbState):
##        u'Selected.'
##    Selected = property(_get, _set, doc = _set.__doc__)
##

class __MIDL_IWinTypes_0009(Union):
    pass
__MIDL_IWinTypes_0009._fields_ = [
    ('hInproc', c_int),
    ('hRemote', c_int),
]
assert sizeof(__MIDL_IWinTypes_0009) == 4, sizeof(__MIDL_IWinTypes_0009)
assert alignment(__MIDL_IWinTypes_0009) == 4, alignment(__MIDL_IWinTypes_0009)
class Counters(CoClass):
    u'System Monitor Counter Collection Type Information'
    _reg_clsid_ = GUID('{B2B066D2-2AAC-11CF-942F-008029004347}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{1B773E42-2509-11CF-942F-008029004347}', 3, 7)
Counters._com_interfaces_ = [ICounters]

class RemotableHandle(Structure):
    pass
RemotableHandle._fields_ = [
    ('fContext', c_int),
    ('u', __MIDL_IWinTypes_0009),
]
assert sizeof(RemotableHandle) == 8, sizeof(RemotableHandle)
assert alignment(RemotableHandle) == 4, alignment(RemotableHandle)
DISystemMonitor._disp_methods_ = [
    DISPMETHOD([dispid(-520), helpstring(u'The appearance.'), 'propget'], c_int, 'Appearance'),
    DISPMETHOD([dispid(-520), helpstring(u'The appearance.'), 'propput'], None, 'Appearance',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(-501), helpstring(u'The background color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'BackColor'),
    DISPMETHOD([dispid(-501), helpstring(u'The background color.'), 'propput'], None, 'BackColor',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(-504), helpstring(u'The border style.'), 'propget'], c_int, 'BorderStyle'),
    DISPMETHOD([dispid(-504), helpstring(u'The border style.'), 'propput'], None, 'BorderStyle',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(-513), helpstring(u'The foreground color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'ForeColor'),
    DISPMETHOD([dispid(-513), helpstring(u'The foreground color.'), 'propput'], None, 'ForeColor',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(-512), helpstring(u'The font for all text.'), 'propget'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font'),
    DISPMETHOD([dispid(-512), helpstring(u'The font for all text.'), 'propputref'], None, 'Font',
               ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'rhs' )),
    DISPMETHOD([dispid(0), helpstring(u'The counter collection.'), 'propget'], POINTER(ICounters), 'Counters'),
    DISPMETHOD([dispid(1), helpstring(u'Show vertical grid.'), 'propput'], None, 'ShowVerticalGrid',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(1), helpstring(u'Show vertical grid.'), 'propget'], VARIANT_BOOL, 'ShowVerticalGrid'),
    DISPMETHOD([dispid(2), helpstring(u'Show horizontal grid.'), 'propput'], None, 'ShowHorizontalGrid',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(2), helpstring(u'Show horizontal grid.'), 'propget'], VARIANT_BOOL, 'ShowHorizontalGrid'),
    DISPMETHOD([dispid(3), helpstring(u'Show counters legend.'), 'propput'], None, 'ShowLegend',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(3), helpstring(u'Show counters legend.'), 'propget'], VARIANT_BOOL, 'ShowLegend'),
    DISPMETHOD([dispid(4), helpstring(u'Show scale labels.'), 'propput'], None, 'ShowScaleLabels',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(4), helpstring(u'Show scale labels.'), 'propget'], VARIANT_BOOL, 'ShowScaleLabels'),
    DISPMETHOD([dispid(5), helpstring(u'Show value bar.'), 'propput'], None, 'ShowValueBar',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(5), helpstring(u'Show value bar.'), 'propget'], VARIANT_BOOL, 'ShowValueBar'),
    DISPMETHOD([dispid(6), helpstring(u'Maximum scale value.'), 'propput'], None, 'MaximumScale',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(6), helpstring(u'Maximum scale value.'), 'propget'], c_int, 'MaximumScale'),
    DISPMETHOD([dispid(7), helpstring(u'Minimum scale value.'), 'propput'], None, 'MinimumScale',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(7), helpstring(u'Minimum scale value.'), 'propget'], c_int, 'MinimumScale'),
    DISPMETHOD([dispid(8), helpstring(u'Data sample interval.'), 'propput'], None, 'UpdateInterval',
               ( ['in'], c_float, 'rhs' )),
    DISPMETHOD([dispid(8), helpstring(u'Data sample interval.'), 'propget'], c_float, 'UpdateInterval'),
    DISPMETHOD([dispid(9), helpstring(u'Display type.'), 'propput'], None, 'DisplayType',
               ( ['in'], DisplayTypeConstants, 'rhs' )),
    DISPMETHOD([dispid(9), helpstring(u'Display type.'), 'propget'], DisplayTypeConstants, 'DisplayType'),
    DISPMETHOD([dispid(16), helpstring(u'Manual update.'), 'propput'], None, 'ManualUpdate',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(16), helpstring(u'Manual update.'), 'propget'], VARIANT_BOOL, 'ManualUpdate'),
    DISPMETHOD([dispid(17), helpstring(u'Graph title.'), 'propput'], None, 'GraphTitle',
               ( ['in'], BSTR, 'rhs' )),
    DISPMETHOD([dispid(17), helpstring(u'Graph title.'), 'propget'], BSTR, 'GraphTitle'),
    DISPMETHOD([dispid(18), helpstring(u'Y axis label.'), 'propput'], None, 'YAxisLabel',
               ( ['in'], BSTR, 'rhs' )),
    DISPMETHOD([dispid(18), helpstring(u'Y axis label.'), 'propget'], BSTR, 'YAxisLabel'),
    DISPMETHOD([dispid(20), helpstring(u'Collect sample for each counter.')], None, 'CollectSample'),
    DISPMETHOD([dispid(21), helpstring(u'Apply visual changes to graph.')], None, 'UpdateGraph'),
    DISPMETHOD([dispid(22), helpstring(u'Display counter browser.')], None, 'BrowseCounters'),
    DISPMETHOD([dispid(23), helpstring(u'Display properties.')], None, 'DisplayProperties'),
    DISPMETHOD([dispid(24), 'hidden'], None, 'Counter',
               ( ['in'], c_int, 'iIndex' ),
               ( ['out'], POINTER(POINTER(ICounterItem)), 'ppICounter' )),
    DISPMETHOD([dispid(25), 'hidden'], None, 'AddCounter',
               ( ['in'], BSTR, 'bsPath' ),
               ( ['out'], POINTER(POINTER(ICounterItem)), 'ppICounter' )),
    DISPMETHOD([dispid(32), 'hidden'], None, 'DeleteCounter',
               ( ['in'], POINTER(ICounterItem), 'pCtr' )),
    DISPMETHOD([dispid(33), helpstring(u'Control panel background color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'BackColorCtl'),
    DISPMETHOD([dispid(33), helpstring(u'Control panel background color.'), 'propput'], None, 'BackColorCtl',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(34), helpstring(u'Log file name.'), 'propput'], None, 'LogFileName',
               ( ['in'], BSTR, 'rhs' )),
    DISPMETHOD([dispid(34), helpstring(u'Log file name.'), 'propget'], BSTR, 'LogFileName'),
    DISPMETHOD([dispid(35), helpstring(u'Start time of log file view.'), 'propput'], None, 'LogViewStart',
               ( ['in'], c_double, 'rhs' )),
    DISPMETHOD([dispid(35), helpstring(u'Start time of log file view.'), 'propget'], c_double, 'LogViewStart'),
    DISPMETHOD([dispid(36), helpstring(u'Stop time of log file view.'), 'propput'], None, 'LogViewStop',
               ( ['in'], c_double, 'rhs' )),
    DISPMETHOD([dispid(36), helpstring(u'Stop time of log file view.'), 'propget'], c_double, 'LogViewStop'),
    DISPMETHOD([dispid(37), helpstring(u'Graph grid color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'GridColor'),
    DISPMETHOD([dispid(37), helpstring(u'Graph grid color.'), 'propput'], None, 'GridColor',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(38), helpstring(u'Graph time bar color.'), 'propget'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'TimeBarColor'),
    DISPMETHOD([dispid(38), helpstring(u'Graph time bar color.'), 'propput'], None, 'TimeBarColor',
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'rhs' )),
    DISPMETHOD([dispid(39), helpstring(u'Highlight the selected counter..'), 'propget'], VARIANT_BOOL, 'Highlight'),
    DISPMETHOD([dispid(39), helpstring(u'Highlight the selected counter..'), 'propput'], None, 'Highlight',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(40), helpstring(u'Show the toolbar'), 'propget'], VARIANT_BOOL, 'ShowToolbar'),
    DISPMETHOD([dispid(40), helpstring(u'Show the toolbar'), 'propput'], None, 'ShowToolbar',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(41), helpstring(u'Paste Counters from clipboard.')], None, 'Paste'),
    DISPMETHOD([dispid(48), helpstring(u'Copy Counters to clipboard.')], None, 'Copy'),
    DISPMETHOD([dispid(49), helpstring(u'Delete all counters in the control.')], None, 'Reset'),
    DISPMETHOD([dispid(50), helpstring(u'Disallow property modifications.'), 'propput'], None, 'ReadOnly',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(50), helpstring(u'Disallow property modifications.'), 'propget'], VARIANT_BOOL, 'ReadOnly'),
    DISPMETHOD([dispid(51), helpstring(u'Report value.'), 'propput'], None, 'ReportValueType',
               ( ['in'], ReportValueTypeConstants, 'rhs' )),
    DISPMETHOD([dispid(51), helpstring(u'Report value.'), 'propget'], ReportValueTypeConstants, 'ReportValueType'),
    DISPMETHOD([dispid(52), helpstring(u'Allow monitoring of duplicate counter instances.'), 'propput'], None, 'MonitorDuplicateInstances',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(52), helpstring(u'Allow monitoring of duplicate counter instances.'), 'propget'], VARIANT_BOOL, 'MonitorDuplicateInstances'),
    DISPMETHOD([dispid(53), helpstring(u'Number of samples per display interval.'), 'propput'], None, 'DisplayFilter',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(53), helpstring(u'Number of samples per display interval.'), 'propget'], c_int, 'DisplayFilter'),
    DISPMETHOD([dispid(54), helpstring(u'The log file collection.'), 'propget'], POINTER(ILogFiles), 'LogFiles'),
    DISPMETHOD([dispid(55), helpstring(u'Data source type.'), 'propput'], None, 'DataSourceType',
               ( ['in'], DataSourceTypeConstants, 'rhs' )),
    DISPMETHOD([dispid(55), helpstring(u'Data source type.'), 'propget'], DataSourceTypeConstants, 'DataSourceType'),
    DISPMETHOD([dispid(56), helpstring(u'SQL DSN name.'), 'propput'], None, 'SqlDsnName',
               ( ['in'], BSTR, 'rhs' )),
    DISPMETHOD([dispid(56), helpstring(u'SQL DSN name.'), 'propget'], BSTR, 'SqlDsnName'),
    DISPMETHOD([dispid(57), helpstring(u'SQL logset name.'), 'propput'], None, 'SqlLogSetName',
               ( ['in'], BSTR, 'rhs' )),
    DISPMETHOD([dispid(57), helpstring(u'SQL logset name.'), 'propget'], BSTR, 'SqlLogSetName'),
    DISPMETHOD([dispid(58), helpstring(u'Show digit grouping in displayed values.'), 'propput'], None, 'EnableDigitGrouping',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(58), helpstring(u'Show digit grouping in displayed values.'), 'propget'], VARIANT_BOOL, 'EnableDigitGrouping'),
    DISPMETHOD([dispid(59), helpstring(u'Enable tooltips in the view.'), 'propput'], None, 'EnableToolTips',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(59), helpstring(u'Enable tooltips in the view.'), 'propget'], VARIANT_BOOL, 'EnableToolTips'),
    DISPMETHOD([dispid(60), helpstring(u'Show time axis labels in the chart.'), 'propput'], None, 'ShowTimeAxisLabels',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(60), helpstring(u'Show time axis labels in the chart.'), 'propget'], VARIANT_BOOL, 'ShowTimeAxisLabels'),
    DISPMETHOD([dispid(61), helpstring(u'Put chart into scroll/wrap style.'), 'propput'], None, 'ChartScroll',
               ( ['in'], VARIANT_BOOL, 'rhs' )),
    DISPMETHOD([dispid(61), helpstring(u'Put chart into scroll/wrap style.'), 'propget'], VARIANT_BOOL, 'ChartScroll'),
    DISPMETHOD([dispid(62), helpstring(u'Number of data points displayed.'), 'propput'], None, 'DataPointCount',
               ( ['in'], c_int, 'rhs' )),
    DISPMETHOD([dispid(62), helpstring(u'Number of data points displayed.'), 'propget'], c_int, 'DataPointCount'),
    DISPMETHOD([dispid(63), helpstring(u'Modify scale factors of selected counters to fit in the display.')], None, 'ScaleToFit',
               ( [], VARIANT_BOOL, 'bSelectedCountersOnly' )),
    DISPMETHOD([dispid(64), helpstring(u'Save to files.')], None, 'SaveAs',
               ( [], BSTR, 'bstrFileName' ),
               ( [], SysmonFileType, 'eSysmonFileType' )),
    DISPMETHOD([dispid(68), helpstring(u'Relog a log file.')], None, 'Relog',
               ( [], BSTR, 'bstrFileName' ),
               ( [], SysmonFileType, 'eSysmonFileType' ),
               ( [], c_int, 'iFilter' )),
    DISPMETHOD([dispid(65), helpstring(u'Remove all data from the control.')], None, 'ClearData'),
    DISPMETHOD([dispid(66), 'propget'], None, 'LogSourceStartTime',
               ( ['out'], POINTER(c_double), 'pDate' )),
    DISPMETHOD([dispid(67), 'propget'], None, 'LogSourceStopTime',
               ( ['out'], POINTER(c_double), 'pDate' )),
    DISPMETHOD([dispid(70), helpstring(u'Time range of view.')], None, 'SetLogViewRange',
               ( ['in'], c_double, 'StartTime' ),
               ( ['in'], c_double, 'StopTime' )),
    DISPMETHOD([dispid(71)], None, 'GetLogViewRange',
               ( ['out'], POINTER(c_double), 'StartTime' ),
               ( ['out'], POINTER(c_double), 'StopTime' )),
    DISPMETHOD([dispid(72)], None, 'BatchingLock',
               ( ['in'], VARIANT_BOOL, 'fLock' ),
               ( ['in'], SysmonBatchReason, 'eBatchReason' )),
    DISPMETHOD([dispid(73), helpstring(u'Load settings from an HTML file.')], None, 'LoadSettings',
               ( ['in'], BSTR, 'bstrSettingFileName' )),
]
__all__ = [ 'DataSourceTypeConstants', 'sysmonDataTime',
           'ISystemMonitorEvents', 'sysmonHistogram', 'sysmonMaximum',
           'SysmonDataType', 'GeneralPropPage', 'sysmonLogFiles',
           'IPropertyPageSite', 'LogFileItem', '_ICounterItemUnion',
           'sysmonSqlLog', 'SysmonBatchReason', 'IPropertyPage',
           'sysmonNullDataSource', 'sysmonBatchAddFiles',
           'ReportValueTypeConstants', 'LogFiles', 'sysmonDataMax',
           'Counters', 'sysmonBatchNone', 'ICounterItem2',
           'ICounterItem', 'sysmonFileBlg', 'sysmonCurrentActivity',
           'AppearPropPage', 'DISystemMonitorInternal',
           'DISystemMonitorEvents', 'SourcePropPage', 'sysmonDataMin',
           'sysmonChartStackedArea', 'ISystemMonitor2',
           'sysmonCurrentValue', 'ICounters', 'sysmonReport',
           'GraphPropPage', 'DISystemMonitor', 'sysmonChartArea',
           'sysmonFileGif', 'CounterPropPage', 'DisplayTypeConstants',
           'PROPPAGEINFO', 'sysmonDataCount', 'sysmonDataAvg',
           'SysmonFileType', 'sysmonFileReport', 'DILogFileItem',
           'sysmonBatchAddCounters', 'sysmonMinimum', 'CounterItem',
           'UINT_PTR', 'sysmonFileHtml', '__MIDL_IWinTypes_0009',
           'ILogFiles', 'IPropertyPage2', 'sysmonFileCsv',
           'sysmonAverage', 'SystemMonitor2', 'ISystemMonitor',
           'LONG_PTR', 'sysmonFileTsv', 'RemotableHandle',
           'DICounterItem', 'CounterItem2',
           'sysmonBatchAddFilesAutoCounters', 'sysmonDefaultValue',
           'sysmonLineGraph', '_ISystemMonitorUnion', 'SystemMonitor',
           'sysmonFileRetiredBlg', 'ILogFileItem']
from comtypes import _check_version; _check_version('', 1552970747.152433)
