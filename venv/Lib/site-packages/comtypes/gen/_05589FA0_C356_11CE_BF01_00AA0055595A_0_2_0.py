# -*- coding: mbcs -*-
typelib_path = 'C:\\Windows\\system32\\amcompat.tlb'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from ctypes import HRESULT
from comtypes import BSTR
from ctypes.wintypes import VARIANT_BOOL
from comtypes import IUnknown
from comtypes.automation import IDispatch
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes import DISPMETHOD, DISPPROPERTY, helpstring
from comtypes import CoClass


class IActiveMovie(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'ActiveMovie Control'
    _iid_ = GUID('{05589FA2-C356-11CE-BF01-00AA0055595A}')
    _idlflags_ = ['dual', 'oleautomation', 'hidden']

# values for enumeration 'StateConstants'
amvNotLoaded = -1
amvStopped = 0
amvPaused = 1
amvRunning = 2
StateConstants = c_int # enum

# values for enumeration 'DisplayModeConstants'
amvTime = 0
amvFrames = 1
DisplayModeConstants = c_int # enum

# values for enumeration 'WindowSizeConstants'
amvOriginalSize = 0
amvDoubleOriginalSize = 1
amvOneSixteenthScreen = 2
amvOneFourthScreen = 3
amvOneHalfScreen = 4
WindowSizeConstants = c_int # enum

# values for enumeration 'AppearanceConstants'
amvFlat = 0
amv3D = 1
AppearanceConstants = c_int # enum

# values for enumeration 'BorderStyleConstants'
amvNone = 0
amvFixedSingle = 1
BorderStyleConstants = c_int # enum
IActiveMovie._methods_ = [
    COMMETHOD([dispid(-552)], HRESULT, 'AboutBox'),
    COMMETHOD([dispid(1610743809), helpstring(u'Puts the multimedia stream into Running state')], HRESULT, 'Run'),
    COMMETHOD([dispid(1610743810), helpstring(u'Puts the multimedia stream into Paused state')], HRESULT, 'Pause'),
    COMMETHOD([dispid(1610743811), helpstring(u'Puts the multimedia stream into Stopped state')], HRESULT, 'Stop'),
    COMMETHOD([dispid(4), helpstring(u'Returns the width of the movie image'), 'propget'], HRESULT, 'ImageSourceWidth',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD([dispid(5), helpstring(u'Returns the height of the movie image'), 'propget'], HRESULT, 'ImageSourceHeight',
              ( ['retval', 'out'], POINTER(c_int), 'pHeight' )),
    COMMETHOD([dispid(6), helpstring(u'Returns the name of the author of the movie clip'), 'propget'], HRESULT, 'Author',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrAuthor' )),
    COMMETHOD([dispid(7), helpstring(u'Returns the title of the movie clip'), 'propget'], HRESULT, 'Title',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrTitle' )),
    COMMETHOD([dispid(8), helpstring(u'Returns the copyright statement of the movie clip'), 'propget'], HRESULT, 'Copyright',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrCopyright' )),
    COMMETHOD([dispid(9), helpstring(u'Returns the description of the movie clip'), 'propget'], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrDescription' )),
    COMMETHOD([dispid(10), helpstring(u'Returns the rating of the movie clip'), 'propget'], HRESULT, 'Rating',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrRating' )),
    COMMETHOD([dispid(11), helpstring(u'Returns/sets the current multimedia file'), 'propget'], HRESULT, 'FileName',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrFileName' )),
    COMMETHOD([dispid(11), helpstring(u'Returns/sets the current multimedia file'), 'propput'], HRESULT, 'FileName',
              ( ['in'], BSTR, 'pbstrFileName' )),
    COMMETHOD([dispid(12), helpstring(u'Returns the duration of the multimedia stream, if known'), 'propget'], HRESULT, 'Duration',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD([dispid(13), helpstring(u'Returns/sets the current position of the multimedia stream'), 'propget'], HRESULT, 'CurrentPosition',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD([dispid(13), helpstring(u'Returns/sets the current position of the multimedia stream'), 'propput'], HRESULT, 'CurrentPosition',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD([dispid(14), helpstring(u'Returns/sets the number of times the movie will be played'), 'propget'], HRESULT, 'PlayCount',
              ( ['retval', 'out'], POINTER(c_int), 'pPlayCount' )),
    COMMETHOD([dispid(14), helpstring(u'Returns/sets the number of times the movie will be played'), 'propput'], HRESULT, 'PlayCount',
              ( ['in'], c_int, 'pPlayCount' )),
    COMMETHOD([dispid(15), helpstring(u'Returns/sets the position where playback will begin'), 'propget'], HRESULT, 'SelectionStart',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD([dispid(15), helpstring(u'Returns/sets the position where playback will begin'), 'propput'], HRESULT, 'SelectionStart',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD([dispid(16), helpstring(u'Returns/sets the position where playback will stop'), 'propget'], HRESULT, 'SelectionEnd',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD([dispid(16), helpstring(u'Returns/sets the position where playback will stop'), 'propput'], HRESULT, 'SelectionEnd',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD([dispid(17), helpstring(u'Returns the current state of the movie clip'), 'propget'], HRESULT, 'CurrentState',
              ( ['retval', 'out'], POINTER(StateConstants), 'pState' )),
    COMMETHOD([dispid(18), helpstring(u'Returns/sets the rate of the multimedia stream'), 'propget'], HRESULT, 'Rate',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD([dispid(18), helpstring(u'Returns/sets the rate of the multimedia stream'), 'propput'], HRESULT, 'Rate',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD([dispid(19), helpstring(u'Returns/sets the audio volume of the multimedia stream'), 'propget'], HRESULT, 'Volume',
              ( ['retval', 'out'], POINTER(c_int), 'pValue' )),
    COMMETHOD([dispid(19), helpstring(u'Returns/sets the audio volume of the multimedia stream'), 'propput'], HRESULT, 'Volume',
              ( ['in'], c_int, 'pValue' )),
    COMMETHOD([dispid(20), helpstring(u'Returns/sets the stereo balance of the multimedia stream'), 'propget'], HRESULT, 'Balance',
              ( ['retval', 'out'], POINTER(c_int), 'pValue' )),
    COMMETHOD([dispid(20), helpstring(u'Returns/sets the stereo balance of the multimedia stream'), 'propput'], HRESULT, 'Balance',
              ( ['in'], c_int, 'pValue' )),
    COMMETHOD([dispid(21), helpstring(u'Enables/disables the right-click context menu'), 'propget'], HRESULT, 'EnableContextMenu',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnable' )),
    COMMETHOD([dispid(21), helpstring(u'Enables/disables the right-click context menu'), 'propput'], HRESULT, 'EnableContextMenu',
              ( ['in'], VARIANT_BOOL, 'pEnable' )),
    COMMETHOD([dispid(22), helpstring(u'Shows/hides the display panel'), 'propget'], HRESULT, 'ShowDisplay',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(22), helpstring(u'Shows/hides the display panel'), 'propput'], HRESULT, 'ShowDisplay',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(23), helpstring(u'Shows/hides the control panel'), 'propget'], HRESULT, 'ShowControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(23), helpstring(u'Shows/hides the control panel'), 'propput'], HRESULT, 'ShowControls',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(24), helpstring(u'Shows/hides the position buttons in the control panel'), 'propget'], HRESULT, 'ShowPositionControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(24), helpstring(u'Shows/hides the position buttons in the control panel'), 'propput'], HRESULT, 'ShowPositionControls',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(25), helpstring(u'Shows/hides the selection buttons in the control panel'), 'propget'], HRESULT, 'ShowSelectionControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(25), helpstring(u'Shows/hides the selection buttons in the control panel'), 'propput'], HRESULT, 'ShowSelectionControls',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(26), helpstring(u'Shows/hides the tracker bar in the control panel'), 'propget'], HRESULT, 'ShowTracker',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(26), helpstring(u'Shows/hides the tracker bar in the control panel'), 'propput'], HRESULT, 'ShowTracker',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(27), helpstring(u'Enables/disables the position buttons in the control panel'), 'propget'], HRESULT, 'EnablePositionControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Enable' )),
    COMMETHOD([dispid(27), helpstring(u'Enables/disables the position buttons in the control panel'), 'propput'], HRESULT, 'EnablePositionControls',
              ( ['in'], VARIANT_BOOL, 'Enable' )),
    COMMETHOD([dispid(28), helpstring(u'Enables/disables the selection buttons in the control panel'), 'propget'], HRESULT, 'EnableSelectionControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Enable' )),
    COMMETHOD([dispid(28), helpstring(u'Enables/disables the selection buttons in the control panel'), 'propput'], HRESULT, 'EnableSelectionControls',
              ( ['in'], VARIANT_BOOL, 'Enable' )),
    COMMETHOD([dispid(29), helpstring(u'Enables/disables the tracker bar in the control panel'), 'propget'], HRESULT, 'EnableTracker',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Enable' )),
    COMMETHOD([dispid(29), helpstring(u'Enables/disables the tracker bar in the control panel'), 'propput'], HRESULT, 'EnableTracker',
              ( ['in'], VARIANT_BOOL, 'Enable' )),
    COMMETHOD([dispid(30), helpstring(u'Allows/disallows hiding the display panel at run time'), 'propget'], HRESULT, 'AllowHideDisplay',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(30), helpstring(u'Allows/disallows hiding the display panel at run time'), 'propput'], HRESULT, 'AllowHideDisplay',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(31), helpstring(u'Allows/disallows hiding the control panel at run time'), 'propget'], HRESULT, 'AllowHideControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(31), helpstring(u'Allows/disallows hiding the control panel at run time'), 'propput'], HRESULT, 'AllowHideControls',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(32), helpstring(u'Returns/sets the display mode (time or frames)'), 'propget'], HRESULT, 'DisplayMode',
              ( ['retval', 'out'], POINTER(DisplayModeConstants), 'pValue' )),
    COMMETHOD([dispid(32), helpstring(u'Returns/sets the display mode (time or frames)'), 'propput'], HRESULT, 'DisplayMode',
              ( ['in'], DisplayModeConstants, 'pValue' )),
    COMMETHOD([dispid(33), helpstring(u'Allows/disallows changing the display mode at run time'), 'propget'], HRESULT, 'AllowChangeDisplayMode',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'fAllow' )),
    COMMETHOD([dispid(33), helpstring(u'Allows/disallows changing the display mode at run time'), 'propput'], HRESULT, 'AllowChangeDisplayMode',
              ( ['in'], VARIANT_BOOL, 'fAllow' )),
    COMMETHOD([dispid(34), helpstring(u'Returns/sets the current filter graph'), 'propget'], HRESULT, 'FilterGraph',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppFilterGraph' )),
    COMMETHOD([dispid(34), helpstring(u'Returns/sets the current filter graph'), 'propput'], HRESULT, 'FilterGraph',
              ( ['in'], POINTER(IUnknown), 'ppFilterGraph' )),
    COMMETHOD([dispid(35), helpstring(u"Returns the current filter graph's Dispatch interface"), 'propget'], HRESULT, 'FilterGraphDispatch',
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'pDispatch' )),
    COMMETHOD([dispid(36), helpstring(u'Returns/sets the foreground color of the display panel'), 'propget'], HRESULT, 'DisplayForeColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'ForeColor' )),
    COMMETHOD([dispid(36), helpstring(u'Returns/sets the foreground color of the display panel'), 'propput'], HRESULT, 'DisplayForeColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'ForeColor' )),
    COMMETHOD([dispid(37), helpstring(u'Returns/sets the background color of the display panel'), 'propget'], HRESULT, 'DisplayBackColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'BackColor' )),
    COMMETHOD([dispid(37), helpstring(u'Returns/sets the background color of the display panel'), 'propput'], HRESULT, 'DisplayBackColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'BackColor' )),
    COMMETHOD([dispid(38), helpstring(u'Returns/sets the movie window size'), 'propget'], HRESULT, 'MovieWindowSize',
              ( ['retval', 'out'], POINTER(WindowSizeConstants), 'WindowSize' )),
    COMMETHOD([dispid(38), helpstring(u'Returns/sets the movie window size'), 'propput'], HRESULT, 'MovieWindowSize',
              ( ['in'], WindowSizeConstants, 'WindowSize' )),
    COMMETHOD([dispid(39), helpstring(u'Indicates whether the media clip will run full screen'), 'propget'], HRESULT, 'FullScreenMode',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnable' )),
    COMMETHOD([dispid(39), helpstring(u'Indicates whether the media clip will run full screen'), 'propput'], HRESULT, 'FullScreenMode',
              ( ['in'], VARIANT_BOOL, 'pEnable' )),
    COMMETHOD([dispid(40), helpstring(u'Indicates whether the Control will start playing when activated'), 'propget'], HRESULT, 'AutoStart',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnable' )),
    COMMETHOD([dispid(40), helpstring(u'Indicates whether the Control will start playing when activated'), 'propput'], HRESULT, 'AutoStart',
              ( ['in'], VARIANT_BOOL, 'pEnable' )),
    COMMETHOD([dispid(41), helpstring(u'Indicates whether the media clip will rewind automatically after playing'), 'propget'], HRESULT, 'AutoRewind',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnable' )),
    COMMETHOD([dispid(41), helpstring(u'Indicates whether the media clip will rewind automatically after playing'), 'propput'], HRESULT, 'AutoRewind',
              ( ['in'], VARIANT_BOOL, 'pEnable' )),
    COMMETHOD([dispid(-515), helpstring(u'Returns the handle of the control window'), 'propget'], HRESULT, 'hWnd',
              ( ['retval', 'out'], POINTER(c_int), 'hWnd' )),
    COMMETHOD([dispid(-520), helpstring(u'Returns/sets the appearance'), 'propget'], HRESULT, 'Appearance',
              ( ['retval', 'out'], POINTER(AppearanceConstants), 'pAppearance' )),
    COMMETHOD([dispid(-520), helpstring(u'Returns/sets the appearance'), 'propput'], HRESULT, 'Appearance',
              ( ['in'], AppearanceConstants, 'pAppearance' )),
    COMMETHOD([dispid(42), helpstring(u'Returns/sets the border style'), 'propget'], HRESULT, 'BorderStyle',
              ( ['retval', 'out'], POINTER(BorderStyleConstants), 'pBorderStyle' )),
    COMMETHOD([dispid(42), helpstring(u'Returns/sets the border style'), 'propput'], HRESULT, 'BorderStyle',
              ( ['in'], BorderStyleConstants, 'pBorderStyle' )),
    COMMETHOD([dispid(-514), helpstring(u'Enables/disables the control'), 'propget'], HRESULT, 'Enabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnabled' )),
    COMMETHOD([dispid(-514), helpstring(u'Enables/disables the control'), 'propput'], HRESULT, 'Enabled',
              ( ['in'], VARIANT_BOOL, 'pEnabled' )),
    COMMETHOD([dispid(1610743885), 'hidden', 'propget'], HRESULT, 'Info',
              ( ['retval', 'out'], POINTER(c_int), 'ppInfo' )),
]
################################################################
## code template for IActiveMovie implementation
##class IActiveMovie_Impl(object):
##    def _get(self):
##        u'Enables/disables the right-click context menu'
##        #return pEnable
##    def _set(self, pEnable):
##        u'Enables/disables the right-click context menu'
##    EnableContextMenu = property(_get, _set, doc = _set.__doc__)
##
##    def Pause(self):
##        u'Puts the multimedia stream into Paused state'
##        #return 
##
##    @property
##    def Copyright(self):
##        u'Returns the copyright statement of the movie clip'
##        #return pbstrCopyright
##
##    @property
##    def Author(self):
##        u'Returns the name of the author of the movie clip'
##        #return pbstrAuthor
##
##    def _get(self):
##        u'Enables/disables the selection buttons in the control panel'
##        #return Enable
##    def _set(self, Enable):
##        u'Enables/disables the selection buttons in the control panel'
##    EnableSelectionControls = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Allows/disallows changing the display mode at run time'
##        #return fAllow
##    def _set(self, fAllow):
##        u'Allows/disallows changing the display mode at run time'
##    AllowChangeDisplayMode = property(_get, _set, doc = _set.__doc__)
##
##    def AboutBox(self):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        u'Returns/sets the current position of the multimedia stream'
##        #return pValue
##    def _set(self, pValue):
##        u'Returns/sets the current position of the multimedia stream'
##    CurrentPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Allows/disallows hiding the display panel at run time'
##        #return Show
##    def _set(self, Show):
##        u'Allows/disallows hiding the display panel at run time'
##    AllowHideDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Enables/disables the position buttons in the control panel'
##        #return Enable
##    def _set(self, Enable):
##        u'Enables/disables the position buttons in the control panel'
##    EnablePositionControls = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns/sets the border style'
##        #return pBorderStyle
##    def _set(self, pBorderStyle):
##        u'Returns/sets the border style'
##    BorderStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns/sets the foreground color of the display panel'
##        #return ForeColor
##    def _set(self, ForeColor):
##        u'Returns/sets the foreground color of the display panel'
##    DisplayForeColor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CurrentState(self):
##        u'Returns the current state of the movie clip'
##        #return pState
##
##    def _get(self):
##        u'Shows/hides the display panel'
##        #return Show
##    def _set(self, Show):
##        u'Shows/hides the display panel'
##    ShowDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def Run(self):
##        u'Puts the multimedia stream into Running state'
##        #return 
##
##    @property
##    def Description(self):
##        u'Returns the description of the movie clip'
##        #return pbstrDescription
##
##    @property
##    def ImageSourceHeight(self):
##        u'Returns the height of the movie image'
##        #return pHeight
##
##    @property
##    def Title(self):
##        u'Returns the title of the movie clip'
##        #return pbstrTitle
##
##    def Stop(self):
##        u'Puts the multimedia stream into Stopped state'
##        #return 
##
##    def _get(self):
##        u'Returns/sets the audio volume of the multimedia stream'
##        #return pValue
##    def _set(self, pValue):
##        u'Returns/sets the audio volume of the multimedia stream'
##    Volume = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ImageSourceWidth(self):
##        u'Returns the width of the movie image'
##        #return pWidth
##
##    def _get(self):
##        u'Returns/sets the position where playback will stop'
##        #return pValue
##    def _set(self, pValue):
##        u'Returns/sets the position where playback will stop'
##    SelectionEnd = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def hWnd(self):
##        u'Returns the handle of the control window'
##        #return hWnd
##
##    def _get(self):
##        u'Allows/disallows hiding the control panel at run time'
##        #return Show
##    def _set(self, Show):
##        u'Allows/disallows hiding the control panel at run time'
##    AllowHideControls = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns/sets the position where playback will begin'
##        #return pValue
##    def _set(self, pValue):
##        u'Returns/sets the position where playback will begin'
##    SelectionStart = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Shows/hides the selection buttons in the control panel'
##        #return Show
##    def _set(self, Show):
##        u'Shows/hides the selection buttons in the control panel'
##    ShowSelectionControls = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Shows/hides the control panel'
##        #return Show
##    def _set(self, Show):
##        u'Shows/hides the control panel'
##    ShowControls = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns/sets the current filter graph'
##        #return ppFilterGraph
##    def _set(self, ppFilterGraph):
##        u'Returns/sets the current filter graph'
##    FilterGraph = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Info(self):
##        '-no docstring-'
##        #return ppInfo
##
##    def _get(self):
##        u'Shows/hides the tracker bar in the control panel'
##        #return Show
##    def _set(self, Show):
##        u'Shows/hides the tracker bar in the control panel'
##    ShowTracker = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Enables/disables the control'
##        #return pEnabled
##    def _set(self, pEnabled):
##        u'Enables/disables the control'
##    Enabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns/sets the background color of the display panel'
##        #return BackColor
##    def _set(self, BackColor):
##        u'Returns/sets the background color of the display panel'
##    DisplayBackColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns/sets the appearance'
##        #return pAppearance
##    def _set(self, pAppearance):
##        u'Returns/sets the appearance'
##    Appearance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FilterGraphDispatch(self):
##        u"Returns the current filter graph's Dispatch interface"
##        #return pDispatch
##
##    def _get(self):
##        u'Shows/hides the position buttons in the control panel'
##        #return Show
##    def _set(self, Show):
##        u'Shows/hides the position buttons in the control panel'
##    ShowPositionControls = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the media clip will rewind automatically after playing'
##        #return pEnable
##    def _set(self, pEnable):
##        u'Indicates whether the media clip will rewind automatically after playing'
##    AutoRewind = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns/sets the stereo balance of the multimedia stream'
##        #return pValue
##    def _set(self, pValue):
##        u'Returns/sets the stereo balance of the multimedia stream'
##    Balance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Enables/disables the tracker bar in the control panel'
##        #return Enable
##    def _set(self, Enable):
##        u'Enables/disables the tracker bar in the control panel'
##    EnableTracker = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Rating(self):
##        u'Returns the rating of the movie clip'
##        #return pbstrRating
##
##    def _get(self):
##        u'Returns/sets the movie window size'
##        #return WindowSize
##    def _set(self, WindowSize):
##        u'Returns/sets the movie window size'
##    MovieWindowSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the media clip will run full screen'
##        #return pEnable
##    def _set(self, pEnable):
##        u'Indicates whether the media clip will run full screen'
##    FullScreenMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns/sets the display mode (time or frames)'
##        #return pValue
##    def _set(self, pValue):
##        u'Returns/sets the display mode (time or frames)'
##    DisplayMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns/sets the current multimedia file'
##        #return pbstrFileName
##    def _set(self, pbstrFileName):
##        u'Returns/sets the current multimedia file'
##    FileName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns/sets the rate of the multimedia stream'
##        #return pValue
##    def _set(self, pValue):
##        u'Returns/sets the rate of the multimedia stream'
##    Rate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the Control will start playing when activated'
##        #return pEnable
##    def _set(self, pEnable):
##        u'Indicates whether the Control will start playing when activated'
##    AutoStart = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Duration(self):
##        u'Returns the duration of the multimedia stream, if known'
##        #return pValue
##
##    def _get(self):
##        u'Returns/sets the number of times the movie will be played'
##        #return pPlayCount
##    def _set(self, pPlayCount):
##        u'Returns/sets the number of times the movie will be played'
##    PlayCount = property(_get, _set, doc = _set.__doc__)
##

class DActiveMovieEvents2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Event interface for ActiveMovie Control'
    _iid_ = GUID('{B6CD6553-E9CB-11D0-821F-00A0C91F9CA0}')
    _idlflags_ = ['hidden']
    _methods_ = []

# values for enumeration 'ReadyStateConstants'
amvUninitialized = 0
amvLoading = 1
amvInteractive = 3
amvComplete = 4
ReadyStateConstants = c_int # enum
DActiveMovieEvents2._disp_methods_ = [
    DISPMETHOD([dispid(1), helpstring(u'Indicates that the current state of the movie has changed')], None, 'StateChange',
               ( [], c_int, 'oldState' ),
               ( [], c_int, 'newState' )),
    DISPMETHOD([dispid(2), helpstring(u'Indicates that the current position of the movie has changed')], None, 'PositionChange',
               ( [], c_double, 'oldPosition' ),
               ( [], c_double, 'newPosition' )),
    DISPMETHOD([dispid(3), helpstring(u"ActiveMovie Control's progress timer")], None, 'Timer'),
    DISPMETHOD([dispid(50), helpstring(u'Reports that an asynchronous operation to open a file has completed successfully')], None, 'OpenComplete'),
    DISPMETHOD([dispid(-600)], None, 'Click'),
    DISPMETHOD([dispid(-601)], None, 'DblClick'),
    DISPMETHOD([dispid(-602)], None, 'KeyDown',
               ( [], POINTER(c_short), 'KeyCode' ),
               ( [], c_short, 'Shift' )),
    DISPMETHOD([dispid(-604)], None, 'KeyUp',
               ( [], POINTER(c_short), 'KeyCode' ),
               ( [], c_short, 'Shift' )),
    DISPMETHOD([dispid(-603)], None, 'KeyPress',
               ( [], POINTER(c_short), 'KeyAscii' )),
    DISPMETHOD([dispid(-605)], None, 'MouseDown',
               ( [], c_short, 'Button' ),
               ( [], c_short, 'Shift' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(-606)], None, 'MouseMove',
               ( [], c_short, 'Button' ),
               ( [], c_short, 'Shift' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(-607)], None, 'MouseUp',
               ( [], c_short, 'Button' ),
               ( [], c_short, 'Shift' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(999)], None, 'Error',
               ( [], c_short, 'SCode' ),
               ( [], BSTR, 'Description' ),
               ( [], BSTR, 'Source' ),
               ( [], POINTER(VARIANT_BOOL), 'CancelDisplay' )),
    DISPMETHOD([dispid(51), helpstring(u'Indicates that the display mode of the movie has changed')], None, 'DisplayModeChange'),
    DISPMETHOD([dispid(-609), helpstring(u'Reports that the ReadyState property of the ActiveMovie Control has changed')], None, 'ReadyStateChange',
               ( [], ReadyStateConstants, 'ReadyState' )),
    DISPMETHOD([dispid(52)], None, 'ScriptCommand',
               ( [], BSTR, 'bstrType' ),
               ( [], BSTR, 'bstrText' )),
]
class DActiveMovieEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Event interface for ActiveMovie Control'
    _iid_ = GUID('{05589FA3-C356-11CE-BF01-00AA0055595A}')
    _idlflags_ = ['hidden']
    _methods_ = []
DActiveMovieEvents._disp_methods_ = [
    DISPMETHOD([dispid(1), helpstring(u'Indicates that the current state of the movie has changed')], None, 'StateChange',
               ( [], c_int, 'oldState' ),
               ( [], c_int, 'newState' )),
    DISPMETHOD([dispid(2), helpstring(u'Indicates that the current position of the movie has changed')], None, 'PositionChange',
               ( [], c_double, 'oldPosition' ),
               ( [], c_double, 'newPosition' )),
    DISPMETHOD([dispid(3), helpstring(u"ActiveMovie Control's progress timer")], None, 'Timer'),
    DISPMETHOD([dispid(50), helpstring(u'Reports that an asynchronous operation to open a file has completed successfully')], None, 'OpenComplete'),
    DISPMETHOD([dispid(-600)], None, 'Click'),
    DISPMETHOD([dispid(-601)], None, 'DblClick'),
    DISPMETHOD([dispid(-602)], None, 'KeyDown',
               ( [], POINTER(c_short), 'KeyCode' ),
               ( [], c_short, 'Shift' )),
    DISPMETHOD([dispid(-604)], None, 'KeyUp',
               ( [], POINTER(c_short), 'KeyCode' ),
               ( [], c_short, 'Shift' )),
    DISPMETHOD([dispid(-603)], None, 'KeyPress',
               ( [], POINTER(c_short), 'KeyAscii' )),
    DISPMETHOD([dispid(-605)], None, 'MouseDown',
               ( [], c_short, 'Button' ),
               ( [], c_short, 'Shift' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(-606)], None, 'MouseMove',
               ( [], c_short, 'Button' ),
               ( [], c_short, 'Shift' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(-607)], None, 'MouseUp',
               ( [], c_short, 'Button' ),
               ( [], c_short, 'Shift' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( [], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(999)], None, 'Error',
               ( [], c_short, 'SCode' ),
               ( [], BSTR, 'Description' ),
               ( [], BSTR, 'Source' ),
               ( [], POINTER(VARIANT_BOOL), 'CancelDisplay' )),
]
class Library(object):
    u'Microsoft ActiveMovie Control'
    name = u'AMovie'
    _reg_typelib_ = ('{05589FA0-C356-11CE-BF01-00AA0055595A}', 2, 0)

class IActiveMovie2(IActiveMovie):
    _case_insensitive_ = True
    u'ActiveMovie Control'
    _iid_ = GUID('{B6CD6554-E9CB-11D0-821F-00A0C91F9CA0}')
    _idlflags_ = ['dual', 'oleautomation', 'hidden']
class IActiveMovie3(IActiveMovie2):
    _case_insensitive_ = True
    u'ActiveMovie Control'
    _iid_ = GUID('{265EC140-AE62-11D1-8500-00A0C91F9CA0}')
    _idlflags_ = ['dual', 'oleautomation']
IActiveMovie2._methods_ = [
    COMMETHOD([dispid(53), helpstring(u'Determines whether the sound card is enabled on the machine')], HRESULT, 'IsSoundCardEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSoundCard' )),
    COMMETHOD([dispid(-525), helpstring(u'Returns the readiness state of the control'), 'propget'], HRESULT, 'ReadyState',
              ( ['retval', 'out'], POINTER(ReadyStateConstants), 'pValue' )),
]
################################################################
## code template for IActiveMovie2 implementation
##class IActiveMovie2_Impl(object):
##    @property
##    def ReadyState(self):
##        u'Returns the readiness state of the control'
##        #return pValue
##
##    def IsSoundCardEnabled(self):
##        u'Determines whether the sound card is enabled on the machine'
##        #return pbSoundCard
##

IActiveMovie3._methods_ = [
    COMMETHOD([dispid(1111), helpstring(u'Returns the Media Player object'), 'propget'], HRESULT, 'MediaPlayer',
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppDispatch' )),
]
################################################################
## code template for IActiveMovie3 implementation
##class IActiveMovie3_Impl(object):
##    @property
##    def MediaPlayer(self):
##        u'Returns the Media Player object'
##        #return ppDispatch
##

class ActiveMovie(CoClass):
    u'Microsoft ActiveMovie Control'
    _reg_clsid_ = GUID('{05589FA1-C356-11CE-BF01-00AA0055595A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{05589FA0-C356-11CE-BF01-00AA0055595A}', 2, 0)
ActiveMovie._com_interfaces_ = [IActiveMovie3, IActiveMovie2, IActiveMovie, DActiveMovieEvents]
ActiveMovie._outgoing_interfaces_ = [DActiveMovieEvents2]

__all__ = [ 'IActiveMovie2', 'IActiveMovie3', 'amvNone',
           'amvInteractive', 'amvLoading', 'DActiveMovieEvents',
           'amvOneFourthScreen', 'amvRunning', 'ActiveMovie',
           'DisplayModeConstants', 'amvNotLoaded',
           'WindowSizeConstants', 'amvOneSixteenthScreen',
           'DActiveMovieEvents2', 'amvFrames', 'amvComplete',
           'amvOriginalSize', 'amvFixedSingle', 'amvFlat',
           'BorderStyleConstants', 'StateConstants', 'IActiveMovie',
           'amvTime', 'AppearanceConstants', 'amvDoubleOriginalSize',
           'amvUninitialized', 'ReadyStateConstants', 'amvStopped',
           'amvPaused', 'amv3D', 'amvOneHalfScreen']
from comtypes import _check_version; _check_version('', 1552995739.170624)
