# -*- coding: mbcs -*-
typelib_path = 'C:\\Windows\\system32\\tdc.ocx'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes import CoClass
from comtypes import BSTR
from ctypes import HRESULT
from ctypes.wintypes import VARIANT_BOOL
from comtypes import IUnknown
from comtypes.automation import IDispatch


class IAmTheTDC(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{3050F6C2-98B5-11CF-BB82-00AA00BDCE0B}')
    _idlflags_ = []
IAmTheTDC._methods_ = [
]
################################################################
## code template for IAmTheTDC implementation
##class IAmTheTDC_Impl(object):

class ITDCCtlEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Tabular Data Control Event interface'
    _iid_ = GUID('{333C7BC6-460F-11D0-BC04-0080C7055A83}')
    _idlflags_ = ['dual', 'oleautomation']
ITDCCtlEvents._methods_ = [
    COMMETHOD([dispid(-609)], None, 'onreadystatechange'),
]
################################################################
## code template for ITDCCtlEvents implementation
##class ITDCCtlEvents_Impl(object):
##    def onreadystatechange(self):
##        '-no docstring-'
##        #return 
##

class CTDCCtl(CoClass):
    u'Tabular Data Control'
    _reg_clsid_ = GUID('{333C7BC4-460F-11D0-BC04-0080C7055A83}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{333C7BC1-460F-11D0-BC04-0080C7055A83}', 1, 1)
class ITDCCtl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'ITDCCtl Interface'
    _iid_ = GUID('{333C7BC5-460F-11D0-BC04-0080C7055A83}')
    _idlflags_ = ['dual', 'oleautomation']
CTDCCtl._com_interfaces_ = [ITDCCtl]
CTDCCtl._outgoing_interfaces_ = [ITDCCtlEvents]

ITDCCtl._methods_ = [
    COMMETHOD([dispid(1), 'propget'], HRESULT, 'FieldDelim',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrFieldDelim' )),
    COMMETHOD([dispid(1), 'propput'], HRESULT, 'FieldDelim',
              ( ['in'], BSTR, 'pbstrFieldDelim' )),
    COMMETHOD([dispid(2), 'propget'], HRESULT, 'RowDelim',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrRowDelim' )),
    COMMETHOD([dispid(2), 'propput'], HRESULT, 'RowDelim',
              ( ['in'], BSTR, 'pbstrRowDelim' )),
    COMMETHOD([dispid(3), 'propget'], HRESULT, 'TextQualifier',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrTextQualifier' )),
    COMMETHOD([dispid(3), 'propput'], HRESULT, 'TextQualifier',
              ( ['in'], BSTR, 'pbstrTextQualifier' )),
    COMMETHOD([dispid(4), 'propget'], HRESULT, 'EscapeChar',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrEscapeChar' )),
    COMMETHOD([dispid(4), 'propput'], HRESULT, 'EscapeChar',
              ( ['in'], BSTR, 'pbstrEscapeChar' )),
    COMMETHOD([dispid(5), 'propget'], HRESULT, 'UseHeader',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pfUseHeader' )),
    COMMETHOD([dispid(5), 'propput'], HRESULT, 'UseHeader',
              ( ['in'], VARIANT_BOOL, 'pfUseHeader' )),
    COMMETHOD([dispid(6), 'hidden', 'propget'], HRESULT, 'SortColumn',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrSortColumn' )),
    COMMETHOD([dispid(6), 'hidden', 'propput'], HRESULT, 'SortColumn',
              ( ['in'], BSTR, 'pbstrSortColumn' )),
    COMMETHOD([dispid(7), 'hidden', 'propget'], HRESULT, 'SortAscending',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pfSortAscending' )),
    COMMETHOD([dispid(7), 'hidden', 'propput'], HRESULT, 'SortAscending',
              ( ['in'], VARIANT_BOOL, 'pfSortAscending' )),
    COMMETHOD([dispid(8), 'hidden', 'propget'], HRESULT, 'FilterValue',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrFilterValue' )),
    COMMETHOD([dispid(8), 'hidden', 'propput'], HRESULT, 'FilterValue',
              ( ['in'], BSTR, 'pbstrFilterValue' )),
    COMMETHOD([dispid(9), 'hidden', 'propget'], HRESULT, 'FilterCriterion',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrFilterCriterion' )),
    COMMETHOD([dispid(9), 'hidden', 'propput'], HRESULT, 'FilterCriterion',
              ( ['in'], BSTR, 'pbstrFilterCriterion' )),
    COMMETHOD([dispid(10), 'hidden', 'propget'], HRESULT, 'FilterColumn',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrFilterColumn' )),
    COMMETHOD([dispid(10), 'hidden', 'propput'], HRESULT, 'FilterColumn',
              ( ['in'], BSTR, 'pbstrFilterColumn' )),
    COMMETHOD([dispid(11), 'propget'], HRESULT, 'CharSet',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrCharSet' )),
    COMMETHOD([dispid(11), 'propput'], HRESULT, 'CharSet',
              ( ['in'], BSTR, 'pbstrCharSet' )),
    COMMETHOD([dispid(14), 'propget'], HRESULT, 'Language',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrLanguage' )),
    COMMETHOD([dispid(14), 'propput'], HRESULT, 'Language',
              ( ['in'], BSTR, 'pbstrLanguage' )),
    COMMETHOD([dispid(20), 'propget'], HRESULT, 'CaseSensitive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pfCaseSensitive' )),
    COMMETHOD([dispid(20), 'propput'], HRESULT, 'CaseSensitive',
              ( ['in'], VARIANT_BOOL, 'pfCaseSensitive' )),
    COMMETHOD([dispid(12), 'propget'], HRESULT, 'DataURL',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrDataURL' )),
    COMMETHOD([dispid(12), 'propput'], HRESULT, 'DataURL',
              ( ['in'], BSTR, 'pbstrDataURL' )),
    COMMETHOD([dispid(-3900), 'restricted'], HRESULT, 'msDataSourceObject',
              ( ['in'], BSTR, 'qualifier' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppUnk' )),
    COMMETHOD([dispid(-3901), 'restricted'], HRESULT, 'addDataSourceListener',
              ( ['in'], POINTER(IUnknown), 'pEvent' )),
    COMMETHOD([dispid(1610743838)], HRESULT, 'Reset'),
    COMMETHOD([dispid(1610743839), 'restricted', 'hidden'], HRESULT, '_OnTimer'),
    COMMETHOD([dispid(16), 'propget'], HRESULT, 'Filter',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrFilterExpr' )),
    COMMETHOD([dispid(16), 'propput'], HRESULT, 'Filter',
              ( ['in'], BSTR, 'pbstrFilterExpr' )),
    COMMETHOD([dispid(17), 'propget'], HRESULT, 'Sort',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrSortExpr' )),
    COMMETHOD([dispid(17), 'propput'], HRESULT, 'Sort',
              ( ['in'], BSTR, 'pbstrSortExpr' )),
    COMMETHOD([dispid(-525), 'propget'], HRESULT, 'ReadyState',
              ( ['retval', 'out'], POINTER(c_int), 'state' )),
    COMMETHOD([dispid(-525), 'propput'], HRESULT, 'ReadyState',
              ( ['in'], c_int, 'state' )),
    COMMETHOD([dispid(18), 'propget'], HRESULT, 'AppendData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pfAppendData' )),
    COMMETHOD([dispid(18), 'propput'], HRESULT, 'AppendData',
              ( ['in'], VARIANT_BOOL, 'pfAppendData' )),
    COMMETHOD([dispid(19), 'hidden', 'propget'], HRESULT, 'OSP',
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppISTD' )),
]
################################################################
## code template for ITDCCtl implementation
##class ITDCCtl_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pbstrTextQualifier
##    def _set(self, pbstrTextQualifier):
##        '-no docstring-'
##    TextQualifier = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return state
##    def _set(self, state):
##        '-no docstring-'
##    ReadyState = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrSortColumn
##    def _set(self, pbstrSortColumn):
##        '-no docstring-'
##    SortColumn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrFilterValue
##    def _set(self, pbstrFilterValue):
##        '-no docstring-'
##    FilterValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrDataURL
##    def _set(self, pbstrDataURL):
##        '-no docstring-'
##    DataURL = property(_get, _set, doc = _set.__doc__)
##
##    def msDataSourceObject(self, qualifier):
##        '-no docstring-'
##        #return ppUnk
##
##    @property
##    def OSP(self):
##        '-no docstring-'
##        #return ppISTD
##
##    def _get(self):
##        '-no docstring-'
##        #return pfCaseSensitive
##    def _set(self, pfCaseSensitive):
##        '-no docstring-'
##    CaseSensitive = property(_get, _set, doc = _set.__doc__)
##
##    def addDataSourceListener(self, pEvent):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrRowDelim
##    def _set(self, pbstrRowDelim):
##        '-no docstring-'
##    RowDelim = property(_get, _set, doc = _set.__doc__)
##
##    def Reset(self):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrSortExpr
##    def _set(self, pbstrSortExpr):
##        '-no docstring-'
##    Sort = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrEscapeChar
##    def _set(self, pbstrEscapeChar):
##        '-no docstring-'
##    EscapeChar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrLanguage
##    def _set(self, pbstrLanguage):
##        '-no docstring-'
##    Language = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrFilterExpr
##    def _set(self, pbstrFilterExpr):
##        '-no docstring-'
##    Filter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrFilterCriterion
##    def _set(self, pbstrFilterCriterion):
##        '-no docstring-'
##    FilterCriterion = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pfUseHeader
##    def _set(self, pfUseHeader):
##        '-no docstring-'
##    UseHeader = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pfSortAscending
##    def _set(self, pfSortAscending):
##        '-no docstring-'
##    SortAscending = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrCharSet
##    def _set(self, pbstrCharSet):
##        '-no docstring-'
##    CharSet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pfAppendData
##    def _set(self, pfAppendData):
##        '-no docstring-'
##    AppendData = property(_get, _set, doc = _set.__doc__)
##
##    def _OnTimer(self):
##        '-no docstring-'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrFilterColumn
##    def _set(self, pbstrFilterColumn):
##        '-no docstring-'
##    FilterColumn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return pbstrFieldDelim
##    def _set(self, pbstrFieldDelim):
##        '-no docstring-'
##    FieldDelim = property(_get, _set, doc = _set.__doc__)
##

class Library(object):
    u'Tabular Data Control 1.1 Type Library'
    name = u'TDCLib'
    _reg_typelib_ = ('{333C7BC1-460F-11D0-BC04-0080C7055A83}', 1, 1)

__all__ = [ 'ITDCCtl', 'IAmTheTDC', 'CTDCCtl', 'ITDCCtlEvents']
from comtypes import _check_version; _check_version('', 1596991558.228274)
