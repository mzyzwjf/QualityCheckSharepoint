# -*- coding: mbcs -*-
typelib_path = 'C:\\Windows\\system32\\msdxm.tlb'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from comtypes import CoClass
from ctypes import HRESULT
from ctypes.wintypes import VARIANT_BOOL
from comtypes import BSTR
from comtypes.automation import IDispatch
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes.automation import VARIANT
from comtypes import DISPMETHOD, DISPPROPERTY, helpstring
from comtypes.automation import VARIANT


class MediaPlayer(CoClass):
    u'Windows Media Player'
    _reg_clsid_ = GUID('{22D6F312-B0F6-11D0-94AB-0080C74C7E95}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{22D6F304-B0F6-11D0-94AB-0080C74C7E95}', 1, 0)
class IMediaPlayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'IMediaPlayer Interface'
    _iid_ = GUID('{22D6F311-B0F6-11D0-94AB-0080C74C7E95}')
    _idlflags_ = ['dual', 'oleautomation']
class IMediaPlayer2(IMediaPlayer):
    _case_insensitive_ = True
    u'IMediaPlayer2 Interface'
    _iid_ = GUID('{20D4F5E0-5475-11D2-9774-0000F80855E6}')
    _idlflags_ = ['dual', 'oleautomation']
class _MediaPlayerEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Event interface for Windows Media Player control'
    _iid_ = GUID('{2D3A4C40-E711-11D0-94AB-0080C74C7E95}')
    _idlflags_ = ['hidden']
    _methods_ = []
MediaPlayer._com_interfaces_ = [IMediaPlayer2]
MediaPlayer._outgoing_interfaces_ = [_MediaPlayerEvents]


# values for enumeration 'MPPlayStateConstants'
mpStopped = 0
mpPaused = 1
mpPlaying = 2
mpWaiting = 3
mpScanForward = 4
mpScanReverse = 5
mpClosed = 6
MPPlayStateConstants = c_int # enum

# values for enumeration 'MPDisplaySizeConstants'
mpDefaultSize = 0
mpHalfSize = 1
mpDoubleSize = 2
mpFullScreen = 3
mpFitToSize = 4
mpOneSixteenthScreen = 5
mpOneFourthScreen = 6
mpOneHalfScreen = 7
MPDisplaySizeConstants = c_int # enum

# values for enumeration 'MPReadyStateConstants'
mpReadyStateUninitialized = 0
mpReadyStateLoading = 1
mpReadyStateInteractive = 3
mpReadyStateComplete = 4
MPReadyStateConstants = c_int # enum

# values for enumeration 'MPDisplayModeConstants'
mpTime = 0
mpFrames = 1
MPDisplayModeConstants = c_int # enum

# values for enumeration 'MPMoreInfoType'
mpShowURL = 0
mpClipURL = 1
mpBannerURL = 2
MPMoreInfoType = c_int # enum

# values for enumeration 'MPMediaInfoType'
mpShowFilename = 0
mpShowTitle = 1
mpShowAuthor = 2
mpShowCopyright = 3
mpShowRating = 4
mpShowDescription = 5
mpShowLogoIcon = 6
mpClipFilename = 7
mpClipTitle = 8
mpClipAuthor = 9
mpClipCopyright = 10
mpClipRating = 11
mpClipDescription = 12
mpClipLogoIcon = 13
mpBannerImage = 14
mpBannerMoreInfo = 15
mpWatermark = 16
MPMediaInfoType = c_int # enum
IMediaPlayer._methods_ = [
    COMMETHOD([dispid(1027), helpstring(u'Returns or sets the current position in the file'), 'propget'], HRESULT, 'CurrentPosition',
              ( ['retval', 'out'], POINTER(c_double), 'pCurrentPosition' )),
    COMMETHOD([dispid(1027), helpstring(u'Returns or sets the current position in the file'), 'propput'], HRESULT, 'CurrentPosition',
              ( ['in'], c_double, 'pCurrentPosition' )),
    COMMETHOD([dispid(1003), helpstring(u'Returns the play duration of the file'), 'propget'], HRESULT, 'Duration',
              ( ['retval', 'out'], POINTER(c_double), 'pDuration' )),
    COMMETHOD([dispid(1001), helpstring(u'Returns the original width of the source images'), 'propget'], HRESULT, 'ImageSourceWidth',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD([dispid(1002), helpstring(u'Returns the original height of the source images'), 'propget'], HRESULT, 'ImageSourceHeight',
              ( ['retval', 'out'], POINTER(c_int), 'pHeight' )),
    COMMETHOD([dispid(1010), helpstring(u'Returns the number of markers in the file'), 'propget'], HRESULT, 'MarkerCount',
              ( ['retval', 'out'], POINTER(c_int), 'pMarkerCount' )),
    COMMETHOD([dispid(1011), helpstring(u'Returns whether or not the file can be fast forwarded or reversed'), 'propget'], HRESULT, 'CanScan',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanScan' )),
    COMMETHOD([dispid(1012), helpstring(u'Returns whether or not the file can be seeked into'), 'propget'], HRESULT, 'CanSeek',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanSeek' )),
    COMMETHOD([dispid(1047), helpstring(u'Returns whether or not the file can be seeked into by markers'), 'propget'], HRESULT, 'CanSeekToMarkers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanSeekToMarkers' )),
    COMMETHOD([dispid(1029), helpstring(u'Returns or sets the current marker number'), 'propget'], HRESULT, 'CurrentMarker',
              ( ['retval', 'out'], POINTER(c_int), 'pCurrentMarker' )),
    COMMETHOD([dispid(1029), helpstring(u'Returns or sets the current marker number'), 'propput'], HRESULT, 'CurrentMarker',
              ( ['in'], c_int, 'pCurrentMarker' )),
    COMMETHOD([dispid(1026), helpstring(u'Returns or sets the current file name and path'), 'propget'], HRESULT, 'FileName',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrFileName' )),
    COMMETHOD([dispid(1026), helpstring(u'Returns or sets the current file name and path'), 'propput'], HRESULT, 'FileName',
              ( ['in'], BSTR, 'pbstrFileName' )),
    COMMETHOD([dispid(1009), helpstring(u'Returns the source path of the file'), 'propget'], HRESULT, 'SourceLink',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrSourceLink' )),
    COMMETHOD([dispid(1036), helpstring(u'Returns the creation date of the file'), 'propget'], HRESULT, 'CreationDate',
              ( ['retval', 'out'], POINTER(c_double), 'pCreationDate' )),
    COMMETHOD([dispid(1038), helpstring(u'Returns the error correction type of the file'), 'propget'], HRESULT, 'ErrorCorrection',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrErrorCorrection' )),
    COMMETHOD([dispid(1037), helpstring(u'Returns the bandwidth of the file in bits per second'), 'propget'], HRESULT, 'Bandwidth',
              ( ['retval', 'out'], POINTER(c_int), 'pBandwidth' )),
    COMMETHOD([dispid(1060), helpstring(u'Returns the protocol used to receive data'), 'propget'], HRESULT, 'SourceProtocol',
              ( ['retval', 'out'], POINTER(c_int), 'pSourceProtocol' )),
    COMMETHOD([dispid(1039), helpstring(u'Returns the number of packets received'), 'propget'], HRESULT, 'ReceivedPackets',
              ( ['retval', 'out'], POINTER(c_int), 'pReceivedPackets' )),
    COMMETHOD([dispid(1040), helpstring(u'Returns the number of packets recovered'), 'propget'], HRESULT, 'RecoveredPackets',
              ( ['retval', 'out'], POINTER(c_int), 'pRecoveredPackets' )),
    COMMETHOD([dispid(1041), helpstring(u'Returns the number of packets lost'), 'propget'], HRESULT, 'LostPackets',
              ( ['retval', 'out'], POINTER(c_int), 'pLostPackets' )),
    COMMETHOD([dispid(1042), helpstring(u'Returns the percentage of packets received in the last 30 seconds'), 'propget'], HRESULT, 'ReceptionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'pReceptionQuality' )),
    COMMETHOD([dispid(1043), helpstring(u'Returns the number of times buffering occurred during playback'), 'propget'], HRESULT, 'BufferingCount',
              ( ['retval', 'out'], POINTER(c_int), 'pBufferingCount' )),
    COMMETHOD([dispid(1058), helpstring(u'Returns whether or not the source is a broadcast'), 'propget'], HRESULT, 'IsBroadcast',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsBroadcast' )),
    COMMETHOD([dispid(1080), helpstring(u'Returns the percentage of buffering completed'), 'propget'], HRESULT, 'BufferingProgress',
              ( ['retval', 'out'], POINTER(c_int), 'pBufferingProgress' )),
    COMMETHOD([dispid(1050), helpstring(u'Returns the name of the station'), 'propget'], HRESULT, 'ChannelName',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrChannelName' )),
    COMMETHOD([dispid(1051), helpstring(u'Returns the description of the station'), 'propget'], HRESULT, 'ChannelDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrChannelDescription' )),
    COMMETHOD([dispid(1052), helpstring(u'Returns the location of the station metafile'), 'propget'], HRESULT, 'ChannelURL',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrChannelURL' )),
    COMMETHOD([dispid(1053), helpstring(u'Returns the contact address of the station'), 'propget'], HRESULT, 'ContactAddress',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrContactAddress' )),
    COMMETHOD([dispid(1054), helpstring(u'Returns the contact phone number of the station'), 'propget'], HRESULT, 'ContactPhone',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrContactPhone' )),
    COMMETHOD([dispid(1055), helpstring(u'Returns the contact e-mail address of the station'), 'propget'], HRESULT, 'ContactEmail',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrContactEmail' )),
    COMMETHOD([dispid(1070), helpstring(u"Returns the control's buffering time"), 'propget'], HRESULT, 'BufferingTime',
              ( ['retval', 'out'], POINTER(c_double), 'pBufferingTime' )),
    COMMETHOD([dispid(1070), helpstring(u"Returns the control's buffering time"), 'propput'], HRESULT, 'BufferingTime',
              ( ['in'], c_double, 'pBufferingTime' )),
    COMMETHOD([dispid(1017), helpstring(u'Returns or sets whether or not file playback is automatically started'), 'propget'], HRESULT, 'AutoStart',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAutoStart' )),
    COMMETHOD([dispid(1017), helpstring(u'Returns or sets whether or not file playback is automatically started'), 'propput'], HRESULT, 'AutoStart',
              ( ['in'], VARIANT_BOOL, 'pAutoStart' )),
    COMMETHOD([dispid(1018), helpstring(u'Returns or sets whether or not a file is rewound at the end of playback'), 'propget'], HRESULT, 'AutoRewind',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAutoRewind' )),
    COMMETHOD([dispid(1018), helpstring(u'Returns or sets whether or not a file is rewound at the end of playback'), 'propput'], HRESULT, 'AutoRewind',
              ( ['in'], VARIANT_BOOL, 'pAutoRewind' )),
    COMMETHOD([dispid(1028), helpstring(u'Returns or sets the current playback rate'), 'propget'], HRESULT, 'Rate',
              ( ['retval', 'out'], POINTER(c_double), 'pRate' )),
    COMMETHOD([dispid(1028), helpstring(u'Returns or sets the current playback rate'), 'propput'], HRESULT, 'Rate',
              ( ['in'], c_double, 'pRate' )),
    COMMETHOD([dispid(1013), helpstring(u'Returns or sets whether or not the control sends keyboard events'), 'propget'], HRESULT, 'SendKeyboardEvents',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSendKeyboardEvents' )),
    COMMETHOD([dispid(1013), helpstring(u'Returns or sets whether or not the control sends keyboard events'), 'propput'], HRESULT, 'SendKeyboardEvents',
              ( ['in'], VARIANT_BOOL, 'pSendKeyboardEvents' )),
    COMMETHOD([dispid(1014), helpstring(u'Returns or sets whether or not the control sends mouse click events'), 'propget'], HRESULT, 'SendMouseClickEvents',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSendMouseClickEvents' )),
    COMMETHOD([dispid(1014), helpstring(u'Returns or sets whether or not the control sends mouse click events'), 'propput'], HRESULT, 'SendMouseClickEvents',
              ( ['in'], VARIANT_BOOL, 'pSendMouseClickEvents' )),
    COMMETHOD([dispid(1015), helpstring(u'Returns or sets whether or not the control sends mouse move events'), 'propget'], HRESULT, 'SendMouseMoveEvents',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSendMouseMoveEvents' )),
    COMMETHOD([dispid(1015), helpstring(u'Returns or sets whether or not the control sends mouse move events'), 'propput'], HRESULT, 'SendMouseMoveEvents',
              ( ['in'], VARIANT_BOOL, 'pSendMouseMoveEvents' )),
    COMMETHOD([dispid(1030), helpstring(u'Returns or sets the number of times a file plays'), 'propget'], HRESULT, 'PlayCount',
              ( ['retval', 'out'], POINTER(c_int), 'pPlayCount' )),
    COMMETHOD([dispid(1030), helpstring(u'Returns or sets the number of times a file plays'), 'propput'], HRESULT, 'PlayCount',
              ( ['in'], c_int, 'pPlayCount' )),
    COMMETHOD([dispid(1025), helpstring(u'Returns or sets whether or not clicking on the control starts file playback'), 'propget'], HRESULT, 'ClickToPlay',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pClickToPlay' )),
    COMMETHOD([dispid(1025), helpstring(u'Returns or sets whether or not clicking on the control starts file playback'), 'propput'], HRESULT, 'ClickToPlay',
              ( ['in'], VARIANT_BOOL, 'pClickToPlay' )),
    COMMETHOD([dispid(1035), helpstring(u'Returns or sets whether or not scanning is enabled on files that support it'), 'propget'], HRESULT, 'AllowScan',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAllowScan' )),
    COMMETHOD([dispid(1035), helpstring(u'Returns or sets whether or not scanning is enabled on files that support it'), 'propput'], HRESULT, 'AllowScan',
              ( ['in'], VARIANT_BOOL, 'pAllowScan' )),
    COMMETHOD([dispid(1021), helpstring(u'Returns or sets whether or not a right mouse click invokes a context menu'), 'propget'], HRESULT, 'EnableContextMenu',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnableContextMenu' )),
    COMMETHOD([dispid(1021), helpstring(u'Returns or sets whether or not a right mouse click invokes a context menu'), 'propput'], HRESULT, 'EnableContextMenu',
              ( ['in'], VARIANT_BOOL, 'pEnableContextMenu' )),
    COMMETHOD([dispid(1044), helpstring(u'Returns or sets the cursor type'), 'propget'], HRESULT, 'CursorType',
              ( ['retval', 'out'], POINTER(c_int), 'pCursorType' )),
    COMMETHOD([dispid(1044), helpstring(u'Returns or sets the cursor type'), 'propput'], HRESULT, 'CursorType',
              ( ['in'], c_int, 'pCursorType' )),
    COMMETHOD([dispid(1057), helpstring(u'Returns the number of installable codecs used by the file'), 'propget'], HRESULT, 'CodecCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCodecCount' )),
    COMMETHOD([dispid(1056), helpstring(u'Returns or sets whether or not the display size can be set at run time'), 'propget'], HRESULT, 'AllowChangeDisplaySize',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAllowChangeDisplaySize' )),
    COMMETHOD([dispid(1056), helpstring(u'Returns or sets whether or not the display size can be set at run time'), 'propput'], HRESULT, 'AllowChangeDisplaySize',
              ( ['in'], VARIANT_BOOL, 'pAllowChangeDisplaySize' )),
    COMMETHOD([dispid(1059), helpstring(u'Returns whether or not the duration is known'), 'propget'], HRESULT, 'IsDurationValid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsDurationValid' )),
    COMMETHOD([dispid(1061), helpstring(u'Returns the open state of the control'), 'propget'], HRESULT, 'OpenState',
              ( ['retval', 'out'], POINTER(c_int), 'pOpenState' )),
    COMMETHOD([dispid(1062), helpstring(u'Returns or sets whether or not the control sends OpenStateChange events'), 'propget'], HRESULT, 'SendOpenStateChangeEvents',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSendOpenStateChangeEvents' )),
    COMMETHOD([dispid(1062), helpstring(u'Returns or sets whether or not the control sends OpenStateChange events'), 'propput'], HRESULT, 'SendOpenStateChangeEvents',
              ( ['in'], VARIANT_BOOL, 'pSendOpenStateChangeEvents' )),
    COMMETHOD([dispid(1063), helpstring(u'Returns or sets whether or not the control sends Warning events'), 'propget'], HRESULT, 'SendWarningEvents',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSendWarningEvents' )),
    COMMETHOD([dispid(1063), helpstring(u'Returns or sets whether or not the control sends Warning events'), 'propput'], HRESULT, 'SendWarningEvents',
              ( ['in'], VARIANT_BOOL, 'pSendWarningEvents' )),
    COMMETHOD([dispid(1064), helpstring(u'Returns or sets whether or not the control sends Error events'), 'propget'], HRESULT, 'SendErrorEvents',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSendErrorEvents' )),
    COMMETHOD([dispid(1064), helpstring(u'Returns or sets whether or not the control sends Error events'), 'propput'], HRESULT, 'SendErrorEvents',
              ( ['in'], VARIANT_BOOL, 'pSendErrorEvents' )),
    COMMETHOD([dispid(1068), helpstring(u'Returns the play state of the control'), 'propget'], HRESULT, 'PlayState',
              ( ['retval', 'out'], POINTER(MPPlayStateConstants), 'pPlayState' )),
    COMMETHOD([dispid(1069), helpstring(u'Returns or sets whether or not the control sends PlayStateChange events'), 'propget'], HRESULT, 'SendPlayStateChangeEvents',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSendPlayStateChangeEvents' )),
    COMMETHOD([dispid(1069), helpstring(u'Returns or sets whether or not the control sends PlayStateChange events'), 'propput'], HRESULT, 'SendPlayStateChangeEvents',
              ( ['in'], VARIANT_BOOL, 'pSendPlayStateChangeEvents' )),
    COMMETHOD([dispid(1032), helpstring(u'Returns or sets the display size of images'), 'propget'], HRESULT, 'DisplaySize',
              ( ['retval', 'out'], POINTER(MPDisplaySizeConstants), 'pDisplaySize' )),
    COMMETHOD([dispid(1032), helpstring(u'Returns or sets the display size of images'), 'propput'], HRESULT, 'DisplaySize',
              ( ['in'], MPDisplaySizeConstants, 'pDisplaySize' )),
    COMMETHOD([dispid(1020), helpstring(u'Returns or sets whether or not received URLs are automatically invoked'), 'propget'], HRESULT, 'InvokeURLs',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pInvokeURLs' )),
    COMMETHOD([dispid(1020), helpstring(u'Returns or sets whether or not received URLs are automatically invoked'), 'propput'], HRESULT, 'InvokeURLs',
              ( ['in'], VARIANT_BOOL, 'pInvokeURLs' )),
    COMMETHOD([dispid(1082), helpstring(u"Returns or sets the control's base HTTP URL"), 'propget'], HRESULT, 'BaseURL',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrBaseURL' )),
    COMMETHOD([dispid(1082), helpstring(u"Returns or sets the control's base HTTP URL"), 'propput'], HRESULT, 'BaseURL',
              ( ['in'], BSTR, 'pbstrBaseURL' )),
    COMMETHOD([dispid(1083), helpstring(u"Returns or sets the control's default target HTTP frame"), 'propget'], HRESULT, 'DefaultFrame',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrDefaultFrame' )),
    COMMETHOD([dispid(1083), helpstring(u"Returns or sets the control's default target HTTP frame"), 'propput'], HRESULT, 'DefaultFrame',
              ( ['in'], BSTR, 'pbstrDefaultFrame' )),
    COMMETHOD([dispid(1065), helpstring(u'Returns whether or not the control currently has an error'), 'propget'], HRESULT, 'HasError',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasError' )),
    COMMETHOD([dispid(1066), helpstring(u'Returns the description of the current error state'), 'propget'], HRESULT, 'ErrorDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrErrorDescription' )),
    COMMETHOD([dispid(1067), helpstring(u'Returns the current error code'), 'propget'], HRESULT, 'ErrorCode',
              ( ['retval', 'out'], POINTER(c_int), 'pErrorCode' )),
    COMMETHOD([dispid(1045), helpstring(u'Returns or sets whether or not the control shows its animation during initial file buffering'), 'propget'], HRESULT, 'AnimationAtStart',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAnimationAtStart' )),
    COMMETHOD([dispid(1045), helpstring(u'Returns or sets whether or not the control shows its animation during initial file buffering'), 'propput'], HRESULT, 'AnimationAtStart',
              ( ['in'], VARIANT_BOOL, 'pAnimationAtStart' )),
    COMMETHOD([dispid(1022), helpstring(u'Returns or sets whether or not the control is transparent before playing'), 'propget'], HRESULT, 'TransparentAtStart',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pTransparentAtStart' )),
    COMMETHOD([dispid(1022), helpstring(u'Returns or sets whether or not the control is transparent before playing'), 'propput'], HRESULT, 'TransparentAtStart',
              ( ['in'], VARIANT_BOOL, 'pTransparentAtStart' )),
    COMMETHOD([dispid(19), helpstring(u'Returns or sets the current volume of the stream'), 'propget'], HRESULT, 'Volume',
              ( ['retval', 'out'], POINTER(c_int), 'pVolume' )),
    COMMETHOD([dispid(19), helpstring(u'Returns or sets the current volume of the stream'), 'propput'], HRESULT, 'Volume',
              ( ['in'], c_int, 'pVolume' )),
    COMMETHOD([dispid(20), helpstring(u'Returns or sets the current balance of the stream'), 'propget'], HRESULT, 'Balance',
              ( ['retval', 'out'], POINTER(c_int), 'pBalance' )),
    COMMETHOD([dispid(20), helpstring(u'Returns or sets the current balance of the stream'), 'propput'], HRESULT, 'Balance',
              ( ['in'], c_int, 'pBalance' )),
    COMMETHOD([dispid(-525), helpstring(u'Returns the readiness state of the control'), 'propget'], HRESULT, 'ReadyState',
              ( ['retval', 'out'], POINTER(MPReadyStateConstants), 'pValue' )),
    COMMETHOD([dispid(15), helpstring(u'Returns or sets the position where playback will begin'), 'propget'], HRESULT, 'SelectionStart',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD([dispid(15), helpstring(u'Returns or sets the position where playback will begin'), 'propput'], HRESULT, 'SelectionStart',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD([dispid(16), helpstring(u'Returns or sets the position where playback will stop'), 'propget'], HRESULT, 'SelectionEnd',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD([dispid(16), helpstring(u'Returns or sets the position where playback will stop'), 'propput'], HRESULT, 'SelectionEnd',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD([dispid(22), helpstring(u'Shows or hides the display panel'), 'propget'], HRESULT, 'ShowDisplay',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(22), helpstring(u'Shows or hides the display panel'), 'propput'], HRESULT, 'ShowDisplay',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(23), helpstring(u'Shows or hides the control panel'), 'propget'], HRESULT, 'ShowControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(23), helpstring(u'Shows or hides the control panel'), 'propput'], HRESULT, 'ShowControls',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(24), helpstring(u'Shows or hides the position buttons in the control panel'), 'propget'], HRESULT, 'ShowPositionControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(24), helpstring(u'Shows or hides the position buttons in the control panel'), 'propput'], HRESULT, 'ShowPositionControls',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(26), helpstring(u'Shows or hides the tracker bar in the control panel'), 'propget'], HRESULT, 'ShowTracker',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(26), helpstring(u'Shows or hides the tracker bar in the control panel'), 'propput'], HRESULT, 'ShowTracker',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(27), helpstring(u'Enables or disables the position buttons in the control panel'), 'propget'], HRESULT, 'EnablePositionControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Enable' )),
    COMMETHOD([dispid(27), helpstring(u'Enables or disables the position buttons in the control panel'), 'propput'], HRESULT, 'EnablePositionControls',
              ( ['in'], VARIANT_BOOL, 'Enable' )),
    COMMETHOD([dispid(29), helpstring(u'Enables or disables the tracker bar in the control panel'), 'propget'], HRESULT, 'EnableTracker',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Enable' )),
    COMMETHOD([dispid(29), helpstring(u'Enables or disables the tracker bar in the control panel'), 'propput'], HRESULT, 'EnableTracker',
              ( ['in'], VARIANT_BOOL, 'Enable' )),
    COMMETHOD([dispid(-514), helpstring(u'Enables or disables the control'), 'propget'], HRESULT, 'Enabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnabled' )),
    COMMETHOD([dispid(-514), helpstring(u'Enables or disables the control'), 'propput'], HRESULT, 'Enabled',
              ( ['in'], VARIANT_BOOL, 'pEnabled' )),
    COMMETHOD([dispid(36), helpstring(u'Returns or sets the foreground color of the display panel'), 'propget'], HRESULT, 'DisplayForeColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'ForeColor' )),
    COMMETHOD([dispid(36), helpstring(u'Returns or sets the foreground color of the display panel'), 'propput'], HRESULT, 'DisplayForeColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'ForeColor' )),
    COMMETHOD([dispid(37), helpstring(u'Returns or sets the background color of the display panel'), 'propget'], HRESULT, 'DisplayBackColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'BackColor' )),
    COMMETHOD([dispid(37), helpstring(u'Returns or sets the background color of the display panel'), 'propput'], HRESULT, 'DisplayBackColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'BackColor' )),
    COMMETHOD([dispid(32), helpstring(u'Returns or sets the display mode (time or frames)'), 'propget'], HRESULT, 'DisplayMode',
              ( ['retval', 'out'], POINTER(MPDisplayModeConstants), 'pValue' )),
    COMMETHOD([dispid(32), helpstring(u'Returns or sets the display mode (time or frames)'), 'propput'], HRESULT, 'DisplayMode',
              ( ['in'], MPDisplayModeConstants, 'pValue' )),
    COMMETHOD([dispid(1103), helpstring(u'Returns or sets the video border 3D effect'), 'propget'], HRESULT, 'VideoBorder3D',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVideoBorderWidth' )),
    COMMETHOD([dispid(1103), helpstring(u'Returns or sets the video border 3D effect'), 'propput'], HRESULT, 'VideoBorder3D',
              ( ['in'], VARIANT_BOOL, 'pVideoBorderWidth' )),
    COMMETHOD([dispid(1101), helpstring(u'Returns or sets the video border width'), 'propget'], HRESULT, 'VideoBorderWidth',
              ( ['retval', 'out'], POINTER(c_int), 'pVideoBorderWidth' )),
    COMMETHOD([dispid(1101), helpstring(u'Returns or sets the video border width'), 'propput'], HRESULT, 'VideoBorderWidth',
              ( ['in'], c_int, 'pVideoBorderWidth' )),
    COMMETHOD([dispid(1102), helpstring(u'Returns or sets the video border color'), 'propget'], HRESULT, 'VideoBorderColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pVideoBorderWidth' )),
    COMMETHOD([dispid(1102), helpstring(u'Returns or sets the video border color'), 'propput'], HRESULT, 'VideoBorderColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pVideoBorderWidth' )),
    COMMETHOD([dispid(1088), helpstring(u'Show Gotobar'), 'propget'], HRESULT, 'ShowGotoBar',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbool' )),
    COMMETHOD([dispid(1088), helpstring(u'Show Gotobar'), 'propput'], HRESULT, 'ShowGotoBar',
              ( ['in'], VARIANT_BOOL, 'pbool' )),
    COMMETHOD([dispid(1086), helpstring(u'Show status bar'), 'propget'], HRESULT, 'ShowStatusBar',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbool' )),
    COMMETHOD([dispid(1086), helpstring(u'Show status bar'), 'propput'], HRESULT, 'ShowStatusBar',
              ( ['in'], VARIANT_BOOL, 'pbool' )),
    COMMETHOD([dispid(1084), helpstring(u'Show captioning text'), 'propget'], HRESULT, 'ShowCaptioning',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbool' )),
    COMMETHOD([dispid(1084), helpstring(u'Show captioning text'), 'propput'], HRESULT, 'ShowCaptioning',
              ( ['in'], VARIANT_BOOL, 'pbool' )),
    COMMETHOD([dispid(1107), helpstring(u'Show audio controls'), 'propget'], HRESULT, 'ShowAudioControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbool' )),
    COMMETHOD([dispid(1107), helpstring(u'Show audio controls'), 'propput'], HRESULT, 'ShowAudioControls',
              ( ['in'], VARIANT_BOOL, 'pbool' )),
    COMMETHOD([dispid(1085), helpstring(u'Returns or sets the captioning information'), 'propget'], HRESULT, 'CaptioningID',
              ( ['retval', 'out'], POINTER(BSTR), 'pstrText' )),
    COMMETHOD([dispid(1085), helpstring(u'Returns or sets the captioning information'), 'propput'], HRESULT, 'CaptioningID',
              ( ['in'], BSTR, 'pstrText' )),
    COMMETHOD([dispid(1089), helpstring(u'Returns or sets the current mute state of the stream'), 'propget'], HRESULT, 'Mute',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'vbool' )),
    COMMETHOD([dispid(1089), helpstring(u'Returns or sets the current mute state of the stream'), 'propput'], HRESULT, 'Mute',
              ( ['in'], VARIANT_BOOL, 'vbool' )),
    COMMETHOD([dispid(1093), helpstring(u'Returns whether the control currently has something that can be previewed'), 'propget'], HRESULT, 'CanPreview',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanPreview' )),
    COMMETHOD([dispid(1091), helpstring(u'Returns or sets whether the control is in preview mode'), 'propget'], HRESULT, 'PreviewMode',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pPreviewMode' )),
    COMMETHOD([dispid(1091), helpstring(u'Returns or sets whether the control is in preview mode'), 'propput'], HRESULT, 'PreviewMode',
              ( ['in'], VARIANT_BOOL, 'pPreviewMode' )),
    COMMETHOD([dispid(1094), helpstring(u'Returns whether the control currently has something that contains multiple items'), 'propget'], HRESULT, 'HasMultipleItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasMuliItems' )),
    COMMETHOD([dispid(1095), helpstring(u'Returns or sets the current language, using windows LCIDs'), 'propget'], HRESULT, 'Language',
              ( ['retval', 'out'], POINTER(c_int), 'pLanguage' )),
    COMMETHOD([dispid(1095), helpstring(u'Returns or sets the current language, using windows LCIDs'), 'propput'], HRESULT, 'Language',
              ( ['in'], c_int, 'pLanguage' )),
    COMMETHOD([dispid(1096), helpstring(u'Returns or sets the current audio stream'), 'propget'], HRESULT, 'AudioStream',
              ( ['retval', 'out'], POINTER(c_int), 'pStream' )),
    COMMETHOD([dispid(1096), helpstring(u'Returns or sets the current audio stream'), 'propput'], HRESULT, 'AudioStream',
              ( ['in'], c_int, 'pStream' )),
    COMMETHOD([dispid(1097), helpstring(u'Returns or sets the closed-captioning style'), 'propget'], HRESULT, 'SAMIStyle',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrStyle' )),
    COMMETHOD([dispid(1097), helpstring(u'Returns or sets the closed-captioning style'), 'propput'], HRESULT, 'SAMIStyle',
              ( ['in'], BSTR, 'pbstrStyle' )),
    COMMETHOD([dispid(1098), helpstring(u'Returns or sets the closed-captioning language'), 'propget'], HRESULT, 'SAMILang',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrLang' )),
    COMMETHOD([dispid(1098), helpstring(u'Returns or sets the closed-captioning language'), 'propput'], HRESULT, 'SAMILang',
              ( ['in'], BSTR, 'pbstrLang' )),
    COMMETHOD([dispid(1099), helpstring(u'Returns or sets the closed-captioning filename'), 'propget'], HRESULT, 'SAMIFileName',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrFileName' )),
    COMMETHOD([dispid(1099), helpstring(u'Returns or sets the closed-captioning filename'), 'propput'], HRESULT, 'SAMIFileName',
              ( ['in'], BSTR, 'pbstrFileName' )),
    COMMETHOD([dispid(1100), helpstring(u'Returns the number of media streams'), 'propget'], HRESULT, 'StreamCount',
              ( ['retval', 'out'], POINTER(c_int), 'pStreamCount' )),
    COMMETHOD([dispid(1106), helpstring(u'Returns a unique id for the player'), 'propget'], HRESULT, 'ClientId',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrClientId' )),
    COMMETHOD([dispid(1113), helpstring(u'Returns the network connection speed of the player'), 'propget'], HRESULT, 'ConnectionSpeed',
              ( ['retval', 'out'], POINTER(c_int), 'plConnectionSpeed' )),
    COMMETHOD([dispid(-500), helpstring(u'Size the control automatically to the loaded media'), 'propget'], HRESULT, 'AutoSize',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbool' )),
    COMMETHOD([dispid(-500), helpstring(u'Size the control automatically to the loaded media'), 'propput'], HRESULT, 'AutoSize',
              ( ['in'], VARIANT_BOOL, 'pbool' )),
    COMMETHOD([dispid(1108), helpstring(u'Enables controls during full screen'), 'propget'], HRESULT, 'EnableFullScreenControls',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbVal' )),
    COMMETHOD([dispid(1108), helpstring(u'Enables controls during full screen'), 'propput'], HRESULT, 'EnableFullScreenControls',
              ( ['in'], VARIANT_BOOL, 'pbVal' )),
    COMMETHOD([dispid(1109), helpstring(u'Returns the ActiveMovie player object'), 'propget'], HRESULT, 'ActiveMovie',
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppdispatch' )),
    COMMETHOD([dispid(1110), helpstring(u'Returns the NetShow player object'), 'propget'], HRESULT, 'NSPlay',
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppdispatch' )),
    COMMETHOD([dispid(1112), helpstring(u'Render video without a window'), 'propget'], HRESULT, 'WindowlessVideo',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbool' )),
    COMMETHOD([dispid(1112), helpstring(u'Render video without a window'), 'propput'], HRESULT, 'WindowlessVideo',
              ( ['in'], VARIANT_BOOL, 'pbool' )),
    COMMETHOD([dispid(2001), helpstring(u'Begins playing from the current position or marker')], HRESULT, 'Play'),
    COMMETHOD([dispid(2003), helpstring(u'Stops file playback at the current position')], HRESULT, 'Stop'),
    COMMETHOD([dispid(2002), helpstring(u'Pauses file playback at the current position')], HRESULT, 'Pause'),
    COMMETHOD([dispid(2004), helpstring(u'Returns the time of a marker')], HRESULT, 'GetMarkerTime',
              ( ['in'], c_int, 'MarkerNum' ),
              ( ['retval', 'out'], POINTER(c_double), 'pMarkerTime' )),
    COMMETHOD([dispid(2005), helpstring(u'Returns the name of a marker')], HRESULT, 'GetMarkerName',
              ( ['in'], c_int, 'MarkerNum' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrMarkerName' )),
    COMMETHOD([dispid(-552), helpstring(u'Displays version information dialog box')], HRESULT, 'AboutBox'),
    COMMETHOD([dispid(2007), helpstring(u'Returns whether or not a codec is installed')], HRESULT, 'GetCodecInstalled',
              ( ['in'], c_int, 'CodecNum' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCodecInstalled' )),
    COMMETHOD([dispid(2008), helpstring(u'Returns the descriptive name of a codec')], HRESULT, 'GetCodecDescription',
              ( ['in'], c_int, 'CodecNum' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrCodecDescription' )),
    COMMETHOD([dispid(2009), helpstring(u'Returns the URL for a codec')], HRESULT, 'GetCodecURL',
              ( ['in'], c_int, 'CodecNum' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrCodecURL' )),
    COMMETHOD([dispid(2011), helpstring(u'Returns a More Information URL')], HRESULT, 'GetMoreInfoURL',
              ( ['in'], MPMoreInfoType, 'MoreInfoType' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrMoreInfoURL' )),
    COMMETHOD([dispid(2016), helpstring(u'Returns an Information String for the Media')], HRESULT, 'GetMediaInfoString',
              ( ['in'], MPMediaInfoType, 'MediaInfoType' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrMediaInfo' )),
    COMMETHOD([dispid(2006), helpstring(u'Cancels the current operation')], HRESULT, 'Cancel'),
    COMMETHOD([dispid(2010), helpstring(u'Opens the given filename asynchronously')], HRESULT, 'Open',
              ( ['in'], BSTR, 'bstrFileName' )),
    COMMETHOD([dispid(53), helpstring(u'Determines whether the sound card is enabled on the machine')], HRESULT, 'IsSoundCardEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSoundCard' )),
    COMMETHOD([dispid(2023), helpstring(u'Jumps to the next item')], HRESULT, 'Next'),
    COMMETHOD([dispid(2022), helpstring(u'Jumps to the previous item')], HRESULT, 'Previous'),
    COMMETHOD([dispid(2015), helpstring(u'Selects a media stream')], HRESULT, 'StreamSelect',
              ( ['in'], c_int, 'StreamNum' )),
    COMMETHOD([dispid(2024), helpstring(u'Fast Forwards the playback')], HRESULT, 'FastForward'),
    COMMETHOD([dispid(2025), helpstring(u'Fast Reverses the playback')], HRESULT, 'FastReverse'),
    COMMETHOD([dispid(2019), helpstring(u'Returns the name of a media stream')], HRESULT, 'GetStreamName',
              ( ['in'], c_int, 'StreamNum' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrStreamName' )),
    COMMETHOD([dispid(2020), helpstring(u'Returns the group of a media stream')], HRESULT, 'GetStreamGroup',
              ( ['in'], c_int, 'StreamNum' ),
              ( ['retval', 'out'], POINTER(c_int), 'pStreamGroup' )),
    COMMETHOD([dispid(2021), helpstring(u'Returns whether a media stream is selected')], HRESULT, 'GetStreamSelected',
              ( ['in'], c_int, 'StreamNum' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pStreamSelected' )),
]
################################################################
## code template for IMediaPlayer implementation
##class IMediaPlayer_Impl(object):
##    def _get(self):
##        u'Returns or sets whether or not a right mouse click invokes a context menu'
##        #return pEnableContextMenu
##    def _set(self, pEnableContextMenu):
##        u'Returns or sets whether or not a right mouse click invokes a context menu'
##    EnableContextMenu = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Returns the control's buffering time"
##        #return pBufferingTime
##    def _set(self, pBufferingTime):
##        u"Returns the control's buffering time"
##    BufferingTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets whether or not the control sends mouse click events'
##        #return pSendMouseClickEvents
##    def _set(self, pSendMouseClickEvents):
##        u'Returns or sets whether or not the control sends mouse click events'
##    SendMouseClickEvents = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ReadyState(self):
##        u'Returns the readiness state of the control'
##        #return pValue
##
##    @property
##    def BufferingProgress(self):
##        u'Returns the percentage of buffering completed'
##        #return pBufferingProgress
##
##    def Pause(self):
##        u'Pauses file playback at the current position'
##        #return 
##
##    def _get(self):
##        u'Show audio controls'
##        #return pbool
##    def _set(self, pbool):
##        u'Show audio controls'
##    ShowAudioControls = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CanScan(self):
##        u'Returns whether or not the file can be fast forwarded or reversed'
##        #return pCanScan
##
##    def _get(self):
##        u'Returns or sets whether or not the control is transparent before playing'
##        #return pTransparentAtStart
##    def _set(self, pTransparentAtStart):
##        u'Returns or sets whether or not the control is transparent before playing'
##    TransparentAtStart = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ChannelURL(self):
##        u'Returns the location of the station metafile'
##        #return pbstrChannelURL
##
##    def _get(self):
##        u'Returns or sets whether or not the control sends OpenStateChange events'
##        #return pSendOpenStateChangeEvents
##    def _set(self, pSendOpenStateChangeEvents):
##        u'Returns or sets whether or not the control sends OpenStateChange events'
##    SendOpenStateChangeEvents = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsDurationValid(self):
##        u'Returns whether or not the duration is known'
##        #return pIsDurationValid
##
##    def _get(self):
##        u'Returns or sets the closed-captioning style'
##        #return pbstrStyle
##    def _set(self, pbstrStyle):
##        u'Returns or sets the closed-captioning style'
##    SAMIStyle = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ImageSourceHeight(self):
##        u'Returns the original height of the source images'
##        #return pHeight
##
##    @property
##    def IsBroadcast(self):
##        u'Returns whether or not the source is a broadcast'
##        #return pIsBroadcast
##
##    def _get(self):
##        u'Shows or hides the display panel'
##        #return Show
##    def _set(self, Show):
##        u'Shows or hides the display panel'
##    ShowDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets the position where playback will begin'
##        #return pValue
##    def _set(self, pValue):
##        u'Returns or sets the position where playback will begin'
##    SelectionStart = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Shows or hides the tracker bar in the control panel'
##        #return Show
##    def _set(self, Show):
##        u'Shows or hides the tracker bar in the control panel'
##    ShowTracker = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Shows or hides the position buttons in the control panel'
##        #return Show
##    def _set(self, Show):
##        u'Shows or hides the position buttons in the control panel'
##    ShowPositionControls = property(_get, _set, doc = _set.__doc__)
##
##    def AboutBox(self):
##        u'Displays version information dialog box'
##        #return 
##
##    def _get(self):
##        u'Returns or sets whether or not the control sends mouse move events'
##        #return pSendMouseMoveEvents
##    def _set(self, pSendMouseMoveEvents):
##        u'Returns or sets whether or not the control sends mouse move events'
##    SendMouseMoveEvents = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Size the control automatically to the loaded media'
##        #return pbool
##    def _set(self, pbool):
##        u'Size the control automatically to the loaded media'
##    AutoSize = property(_get, _set, doc = _set.__doc__)
##
##    def GetStreamGroup(self, StreamNum):
##        u'Returns the group of a media stream'
##        #return pStreamGroup
##
##    def _get(self):
##        u'Returns or sets the current mute state of the stream'
##        #return vbool
##    def _set(self, vbool):
##        u'Returns or sets the current mute state of the stream'
##    Mute = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Render video without a window'
##        #return pbool
##    def _set(self, pbool):
##        u'Render video without a window'
##    WindowlessVideo = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets the display mode (time or frames)'
##        #return pValue
##    def _set(self, pValue):
##        u'Returns or sets the display mode (time or frames)'
##    DisplayMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets the current file name and path'
##        #return pbstrFileName
##    def _set(self, pbstrFileName):
##        u'Returns or sets the current file name and path'
##    FileName = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LostPackets(self):
##        u'Returns the number of packets lost'
##        #return pLostPackets
##
##    def StreamSelect(self, StreamNum):
##        u'Selects a media stream'
##        #return 
##
##    def _get(self):
##        u'Returns or sets the video border 3D effect'
##        #return pVideoBorderWidth
##    def _set(self, pVideoBorderWidth):
##        u'Returns or sets the video border 3D effect'
##    VideoBorder3D = property(_get, _set, doc = _set.__doc__)
##
##    def Previous(self):
##        u'Jumps to the previous item'
##        #return 
##
##    def GetMarkerTime(self, MarkerNum):
##        u'Returns the time of a marker'
##        #return pMarkerTime
##
##    def _get(self):
##        u"Returns or sets the control's base HTTP URL"
##        #return pbstrBaseURL
##    def _set(self, pbstrBaseURL):
##        u"Returns or sets the control's base HTTP URL"
##    BaseURL = property(_get, _set, doc = _set.__doc__)
##
##    def GetStreamSelected(self, StreamNum):
##        u'Returns whether a media stream is selected'
##        #return pStreamSelected
##
##    def Next(self):
##        u'Jumps to the next item'
##        #return 
##
##    @property
##    def OpenState(self):
##        u'Returns the open state of the control'
##        #return pOpenState
##
##    @property
##    def CanSeek(self):
##        u'Returns whether or not the file can be seeked into'
##        #return pCanSeek
##
##    def FastReverse(self):
##        u'Fast Reverses the playback'
##        #return 
##
##    def _get(self):
##        u'Returns or sets the foreground color of the display panel'
##        #return ForeColor
##    def _set(self, ForeColor):
##        u'Returns or sets the foreground color of the display panel'
##    DisplayForeColor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ContactPhone(self):
##        u'Returns the contact phone number of the station'
##        #return pbstrContactPhone
##
##    @property
##    def ChannelDescription(self):
##        u'Returns the description of the station'
##        #return pbstrChannelDescription
##
##    def _get(self):
##        u'Returns or sets the current audio stream'
##        #return pStream
##    def _set(self, pStream):
##        u'Returns or sets the current audio stream'
##    AudioStream = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets the background color of the display panel'
##        #return BackColor
##    def _set(self, BackColor):
##        u'Returns or sets the background color of the display panel'
##    DisplayBackColor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ImageSourceWidth(self):
##        u'Returns the original width of the source images'
##        #return pWidth
##
##    @property
##    def SourceLink(self):
##        u'Returns the source path of the file'
##        #return pbstrSourceLink
##
##    def _get(self):
##        u'Returns or sets whether or not the control sends keyboard events'
##        #return pSendKeyboardEvents
##    def _set(self, pSendKeyboardEvents):
##        u'Returns or sets whether or not the control sends keyboard events'
##    SendKeyboardEvents = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CodecCount(self):
##        u'Returns the number of installable codecs used by the file'
##        #return pCodecCount
##
##    def _get(self):
##        u'Returns or sets whether or not a file is rewound at the end of playback'
##        #return pAutoRewind
##    def _set(self, pAutoRewind):
##        u'Returns or sets whether or not a file is rewound at the end of playback'
##    AutoRewind = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SourceProtocol(self):
##        u'Returns the protocol used to receive data'
##        #return pSourceProtocol
##
##    def GetMoreInfoURL(self, MoreInfoType):
##        u'Returns a More Information URL'
##        #return pbstrMoreInfoURL
##
##    def GetMediaInfoString(self, MediaInfoType):
##        u'Returns an Information String for the Media'
##        #return pbstrMediaInfo
##
##    @property
##    def ErrorDescription(self):
##        u'Returns the description of the current error state'
##        #return pbstrErrorDescription
##
##    @property
##    def ReceptionQuality(self):
##        u'Returns the percentage of packets received in the last 30 seconds'
##        #return pReceptionQuality
##
##    @property
##    def MarkerCount(self):
##        u'Returns the number of markers in the file'
##        #return pMarkerCount
##
##    def GetCodecDescription(self, CodecNum):
##        u'Returns the descriptive name of a codec'
##        #return pbstrCodecDescription
##
##    def _get(self):
##        u'Returns or sets whether or not file playback is automatically started'
##        #return pAutoStart
##    def _set(self, pAutoStart):
##        u'Returns or sets whether or not file playback is automatically started'
##    AutoStart = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ContactAddress(self):
##        u'Returns the contact address of the station'
##        #return pbstrContactAddress
##
##    def _get(self):
##        u'Returns or sets whether or not the control shows its animation during initial file buffering'
##        #return pAnimationAtStart
##    def _set(self, pAnimationAtStart):
##        u'Returns or sets whether or not the control shows its animation during initial file buffering'
##    AnimationAtStart = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ConnectionSpeed(self):
##        u'Returns the network connection speed of the player'
##        #return plConnectionSpeed
##
##    def _get(self):
##        u'Returns or sets the current position in the file'
##        #return pCurrentPosition
##    def _set(self, pCurrentPosition):
##        u'Returns or sets the current position in the file'
##    CurrentPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Enables or disables the position buttons in the control panel'
##        #return Enable
##    def _set(self, Enable):
##        u'Enables or disables the position buttons in the control panel'
##    EnablePositionControls = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets whether or not the control sends Warning events'
##        #return pSendWarningEvents
##    def _set(self, pSendWarningEvents):
##        u'Returns or sets whether or not the control sends Warning events'
##    SendWarningEvents = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ActiveMovie(self):
##        u'Returns the ActiveMovie player object'
##        #return ppdispatch
##
##    @property
##    def ErrorCode(self):
##        u'Returns the current error code'
##        #return pErrorCode
##
##    def Play(self):
##        u'Begins playing from the current position or marker'
##        #return 
##
##    def GetMarkerName(self, MarkerNum):
##        u'Returns the name of a marker'
##        #return pbstrMarkerName
##
##    @property
##    def ReceivedPackets(self):
##        u'Returns the number of packets received'
##        #return pReceivedPackets
##
##    def IsSoundCardEnabled(self):
##        u'Determines whether the sound card is enabled on the machine'
##        #return pbSoundCard
##
##    def _get(self):
##        u'Returns or sets the display size of images'
##        #return pDisplaySize
##    def _set(self, pDisplaySize):
##        u'Returns or sets the display size of images'
##    DisplaySize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ContactEmail(self):
##        u'Returns the contact e-mail address of the station'
##        #return pbstrContactEmail
##
##    def GetCodecURL(self, CodecNum):
##        u'Returns the URL for a codec'
##        #return pbstrCodecURL
##
##    def _get(self):
##        u'Returns or sets whether or not the display size can be set at run time'
##        #return pAllowChangeDisplaySize
##    def _set(self, pAllowChangeDisplaySize):
##        u'Returns or sets whether or not the display size can be set at run time'
##    AllowChangeDisplaySize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets whether or not received URLs are automatically invoked'
##        #return pInvokeURLs
##    def _set(self, pInvokeURLs):
##        u'Returns or sets whether or not received URLs are automatically invoked'
##    InvokeURLs = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Shows or hides the control panel'
##        #return Show
##    def _set(self, Show):
##        u'Shows or hides the control panel'
##    ShowControls = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets whether the control is in preview mode'
##        #return pPreviewMode
##    def _set(self, pPreviewMode):
##        u'Returns or sets whether the control is in preview mode'
##    PreviewMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets the current language, using windows LCIDs'
##        #return pLanguage
##    def _set(self, pLanguage):
##        u'Returns or sets the current language, using windows LCIDs'
##    Language = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Enables or disables the control'
##        #return pEnabled
##    def _set(self, pEnabled):
##        u'Enables or disables the control'
##    Enabled = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def HasMultipleItems(self):
##        u'Returns whether the control currently has something that contains multiple items'
##        #return pHasMuliItems
##
##    @property
##    def BufferingCount(self):
##        u'Returns the number of times buffering occurred during playback'
##        #return pBufferingCount
##
##    def FastForward(self):
##        u'Fast Forwards the playback'
##        #return 
##
##    def _get(self):
##        u'Returns or sets the current balance of the stream'
##        #return pBalance
##    def _set(self, pBalance):
##        u'Returns or sets the current balance of the stream'
##    Balance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets whether or not the control sends PlayStateChange events'
##        #return pSendPlayStateChangeEvents
##    def _set(self, pSendPlayStateChangeEvents):
##        u'Returns or sets whether or not the control sends PlayStateChange events'
##    SendPlayStateChangeEvents = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show status bar'
##        #return pbool
##    def _set(self, pbool):
##        u'Show status bar'
##    ShowStatusBar = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def HasError(self):
##        u'Returns whether or not the control currently has an error'
##        #return pHasError
##
##    def _get(self):
##        u'Returns or sets the closed-captioning filename'
##        #return pbstrFileName
##    def _set(self, pbstrFileName):
##        u'Returns or sets the closed-captioning filename'
##    SAMIFileName = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def StreamCount(self):
##        u'Returns the number of media streams'
##        #return pStreamCount
##
##    def _get(self):
##        u'Returns or sets the current marker number'
##        #return pCurrentMarker
##    def _set(self, pCurrentMarker):
##        u'Returns or sets the current marker number'
##    CurrentMarker = property(_get, _set, doc = _set.__doc__)
##
##    def Cancel(self):
##        u'Cancels the current operation'
##        #return 
##
##    @property
##    def ErrorCorrection(self):
##        u'Returns the error correction type of the file'
##        #return pbstrErrorCorrection
##
##    def _get(self):
##        u'Returns or sets the number of times a file plays'
##        #return pPlayCount
##    def _set(self, pPlayCount):
##        u'Returns or sets the number of times a file plays'
##    PlayCount = property(_get, _set, doc = _set.__doc__)
##
##    def Open(self, bstrFileName):
##        u'Opens the given filename asynchronously'
##        #return 
##
##    @property
##    def ClientId(self):
##        u'Returns a unique id for the player'
##        #return pbstrClientId
##
##    def _get(self):
##        u'Returns or sets the video border width'
##        #return pVideoBorderWidth
##    def _set(self, pVideoBorderWidth):
##        u'Returns or sets the video border width'
##    VideoBorderWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Enables controls during full screen'
##        #return pbVal
##    def _set(self, pbVal):
##        u'Enables controls during full screen'
##    EnableFullScreenControls = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PlayState(self):
##        u'Returns the play state of the control'
##        #return pPlayState
##
##    def GetCodecInstalled(self, CodecNum):
##        u'Returns whether or not a codec is installed'
##        #return pCodecInstalled
##
##    def _get(self):
##        u"Returns or sets the control's default target HTTP frame"
##        #return pbstrDefaultFrame
##    def _set(self, pbstrDefaultFrame):
##        u"Returns or sets the control's default target HTTP frame"
##    DefaultFrame = property(_get, _set, doc = _set.__doc__)
##
##    def Stop(self):
##        u'Stops file playback at the current position'
##        #return 
##
##    @property
##    def Bandwidth(self):
##        u'Returns the bandwidth of the file in bits per second'
##        #return pBandwidth
##
##    @property
##    def NSPlay(self):
##        u'Returns the NetShow player object'
##        #return ppdispatch
##
##    def _get(self):
##        u'Returns or sets the current volume of the stream'
##        #return pVolume
##    def _set(self, pVolume):
##        u'Returns or sets the current volume of the stream'
##    Volume = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RecoveredPackets(self):
##        u'Returns the number of packets recovered'
##        #return pRecoveredPackets
##
##    def _get(self):
##        u'Returns or sets the position where playback will stop'
##        #return pValue
##    def _set(self, pValue):
##        u'Returns or sets the position where playback will stop'
##    SelectionEnd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets whether or not scanning is enabled on files that support it'
##        #return pAllowScan
##    def _set(self, pAllowScan):
##        u'Returns or sets whether or not scanning is enabled on files that support it'
##    AllowScan = property(_get, _set, doc = _set.__doc__)
##
##    def GetStreamName(self, StreamNum):
##        u'Returns the name of a media stream'
##        #return pbstrStreamName
##
##    @property
##    def CanPreview(self):
##        u'Returns whether the control currently has something that can be previewed'
##        #return pCanPreview
##
##    def _get(self):
##        u'Returns or sets the closed-captioning language'
##        #return pbstrLang
##    def _set(self, pbstrLang):
##        u'Returns or sets the closed-captioning language'
##    SAMILang = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ChannelName(self):
##        u'Returns the name of the station'
##        #return pbstrChannelName
##
##    def _get(self):
##        u'Enables or disables the tracker bar in the control panel'
##        #return Enable
##    def _set(self, Enable):
##        u'Enables or disables the tracker bar in the control panel'
##    EnableTracker = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show Gotobar'
##        #return pbool
##    def _set(self, pbool):
##        u'Show Gotobar'
##    ShowGotoBar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets the video border color'
##        #return pVideoBorderWidth
##    def _set(self, pVideoBorderWidth):
##        u'Returns or sets the video border color'
##    VideoBorderColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets the cursor type'
##        #return pCursorType
##    def _set(self, pCursorType):
##        u'Returns or sets the cursor type'
##    CursorType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets the captioning information'
##        #return pstrText
##    def _set(self, pstrText):
##        u'Returns or sets the captioning information'
##    CaptioningID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CanSeekToMarkers(self):
##        u'Returns whether or not the file can be seeked into by markers'
##        #return pCanSeekToMarkers
##
##    def _get(self):
##        u'Returns or sets the current playback rate'
##        #return pRate
##    def _set(self, pRate):
##        u'Returns or sets the current playback rate'
##    Rate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show captioning text'
##        #return pbool
##    def _set(self, pbool):
##        u'Show captioning text'
##    ShowCaptioning = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns or sets whether or not clicking on the control starts file playback'
##        #return pClickToPlay
##    def _set(self, pClickToPlay):
##        u'Returns or sets whether or not clicking on the control starts file playback'
##    ClickToPlay = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Duration(self):
##        u'Returns the play duration of the file'
##        #return pDuration
##
##    @property
##    def CreationDate(self):
##        u'Returns the creation date of the file'
##        #return pCreationDate
##
##    def _get(self):
##        u'Returns or sets whether or not the control sends Error events'
##        #return pSendErrorEvents
##    def _set(self, pSendErrorEvents):
##        u'Returns or sets whether or not the control sends Error events'
##    SendErrorEvents = property(_get, _set, doc = _set.__doc__)
##

class IMediaPlayerDvd(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'MediaPlayer DVD interface'
    _iid_ = GUID('{746EB440-3835-11D2-9774-0000F80855E6}')
    _idlflags_ = ['dual', 'oleautomation']

# values for enumeration 'MPShowDialogConstants'
mpShowDialogHelp = 0
mpShowDialogStatistics = 1
mpShowDialogOptions = 2
mpShowDialogContextMenu = 3
MPShowDialogConstants = c_int # enum
IMediaPlayer2._methods_ = [
    COMMETHOD([dispid(1500), helpstring(u'Returns the MediaPlayer DVD interface'), 'propget'], HRESULT, 'DVD',
              ( ['retval', 'out'], POINTER(POINTER(IMediaPlayerDvd)), 'ppdispatch' )),
    COMMETHOD([dispid(2028), helpstring(u'Returns the value for a given parameter name and entry number')], HRESULT, 'GetMediaParameter',
              ( ['in'], c_int, 'EntryNum' ),
              ( ['in'], BSTR, 'bstrParameterName' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrParameterValue' )),
    COMMETHOD([dispid(2029), helpstring(u'Returns the name for a given parameter index and entry number')], HRESULT, 'GetMediaParameterName',
              ( ['in'], c_int, 'EntryNum' ),
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrParameterName' )),
    COMMETHOD([dispid(2030), helpstring(u'Returns the number of playlist entries'), 'propget'], HRESULT, 'EntryCount',
              ( ['retval', 'out'], POINTER(c_int), 'pNumberEntries' )),
    COMMETHOD([dispid(2031), helpstring(u"Returns the current playlist item's entry number")], HRESULT, 'GetCurrentEntry',
              ( ['retval', 'out'], POINTER(c_int), 'pEntryNumber' )),
    COMMETHOD([dispid(2032), helpstring(u'Sets the current playlist entry')], HRESULT, 'SetCurrentEntry',
              ( ['in'], c_int, 'EntryNumber' )),
    COMMETHOD([dispid(2033), helpstring(u'Displays modal dialog box containing WMP options')], HRESULT, 'ShowDialog',
              ( ['in'], MPShowDialogConstants, 'mpDialogIndex' )),
]
################################################################
## code template for IMediaPlayer2 implementation
##class IMediaPlayer2_Impl(object):
##    def GetMediaParameterName(self, EntryNum, Index):
##        u'Returns the name for a given parameter index and entry number'
##        #return pbstrParameterName
##
##    def GetMediaParameter(self, EntryNum, bstrParameterName):
##        u'Returns the value for a given parameter name and entry number'
##        #return pbstrParameterValue
##
##    @property
##    def DVD(self):
##        u'Returns the MediaPlayer DVD interface'
##        #return ppdispatch
##
##    def SetCurrentEntry(self, EntryNumber):
##        u'Sets the current playlist entry'
##        #return 
##
##    def GetCurrentEntry(self):
##        u"Returns the current playlist item's entry number"
##        #return pEntryNumber
##
##    @property
##    def EntryCount(self):
##        u'Returns the number of playlist entries'
##        #return pNumberEntries
##
##    def ShowDialog(self, mpDialogIndex):
##        u'Displays modal dialog box containing WMP options'
##        #return 
##


# values for enumeration 'DVDMenuIDConstants'
dvdMenu_Title = 2
dvdMenu_Root = 3
dvdMenu_Subpicture = 4
dvdMenu_Audio = 5
dvdMenu_Angle = 6
dvdMenu_Chapter = 7
DVDMenuIDConstants = c_int # enum
class Library(object):
    u'Windows Media Player'
    name = u'MediaPlayer'
    _reg_typelib_ = ('{22D6F304-B0F6-11D0-94AB-0080C74C7E95}', 1, 0)

IMediaPlayerDvd._methods_ = [
    COMMETHOD([dispid(1526), helpstring(u'Selects and activates specified button')], HRESULT, 'ButtonSelectAndActivate',
              ( ['in'], c_ulong, 'uiButton' )),
    COMMETHOD([dispid(1521), helpstring(u'Selects the button above current button')], HRESULT, 'UpperButtonSelect'),
    COMMETHOD([dispid(1522), helpstring(u'Selects the button below current button')], HRESULT, 'LowerButtonSelect'),
    COMMETHOD([dispid(1523), helpstring(u'Selects the button to the left of current button')], HRESULT, 'LeftButtonSelect'),
    COMMETHOD([dispid(1524), helpstring(u'Selects the button to the right of current button')], HRESULT, 'RightButtonSelect'),
    COMMETHOD([dispid(1525), helpstring(u'Activates the currentlt selected button')], HRESULT, 'ButtonActivate'),
    COMMETHOD([dispid(1517), helpstring(u'forward play at the specified speed')], HRESULT, 'ForwardScan',
              ( ['in'], c_double, 'dwSpeed' )),
    COMMETHOD([dispid(1518), helpstring(u'reverse play at the specified speed')], HRESULT, 'BackwardScan',
              ( ['in'], c_double, 'dwSpeed' )),
    COMMETHOD([dispid(1514), helpstring(u'play previous program')], HRESULT, 'PrevPGSearch'),
    COMMETHOD([dispid(1515), helpstring(u'play current program')], HRESULT, 'TopPGSearch'),
    COMMETHOD([dispid(1516), helpstring(u'play next program')], HRESULT, 'NextPGSearch'),
    COMMETHOD([dispid(1507), helpstring(u'Play title number 1-99')], HRESULT, 'TitlePlay',
              ( ['in'], c_ulong, 'uiTitle' )),
    COMMETHOD([dispid(1508), helpstring(u'Play chapter number 1-99 of title 1-99')], HRESULT, 'ChapterPlay',
              ( ['in'], c_ulong, 'uiTitle' ),
              ( ['in'], c_ulong, 'uiChapter' )),
    COMMETHOD([dispid(1513), helpstring(u'play at specified chapter in current title')], HRESULT, 'ChapterSearch',
              ( ['in'], c_ulong, 'Chapter' )),
    COMMETHOD([dispid(1519), helpstring(u'Play specified menu')], HRESULT, 'MenuCall',
              ( ['in'], DVDMenuIDConstants, 'MenuID' )),
    COMMETHOD([dispid(1520), helpstring(u'Resume title playback')], HRESULT, 'ResumeFromMenu'),
    COMMETHOD([dispid(1509), helpstring(u'Play at specified time (hh:mm:ss:ff) within specified title')], HRESULT, 'TimePlay',
              ( ['in'], c_ulong, 'uiTitle' ),
              ( ['in'], BSTR, 'bstrTime' )),
    COMMETHOD([dispid(1512), helpstring(u'play at specified time in current title')], HRESULT, 'TimeSearch',
              ( ['in'], BSTR, 'bstrTime' )),
    COMMETHOD([dispid(1541), helpstring(u'Playing a sequence of chapters in specified title')], HRESULT, 'ChapterPlayAutoStop',
              ( ['in'], c_ulong, 'ulTitle' ),
              ( ['in'], c_ulong, 'ulChapter' ),
              ( ['in'], c_ulong, 'ulChaptersToPlay' )),
    COMMETHOD([dispid(1527), helpstring(u'Releases any current still if there are no available buttons')], HRESULT, 'StillOff'),
    COMMETHOD([dispid(1511), helpstring(u'play current program chain ')], HRESULT, 'GoUp'),
    COMMETHOD([dispid(1582), helpstring(u'Gets a string containing the total time in the title (hh:mm:ss:ff)'), 'propget'], HRESULT, 'TotalTitleTime',
              ( ['retval', 'out'], POINTER(BSTR), 'bstrTime' )),
    COMMETHOD([dispid(1550), helpstring(u'Gets the number of chapters for the specified title')], HRESULT, 'GetNumberOfChapters',
              ( ['in'], c_ulong, 'ulTitle' ),
              ( ['retval', 'out'], POINTER(c_ulong), 'ulNumChapters' )),
    COMMETHOD([dispid(1551), helpstring(u'Gets the name of the Audio language')], HRESULT, 'GetAudioLanguage',
              ( ['in'], c_ulong, 'ulStream' ),
              ( ['retval', 'out'], POINTER(BSTR), 'bstrAudioLang' )),
    COMMETHOD([dispid(1555), helpstring(u'Gets the name of the Subpicture language')], HRESULT, 'GetSubpictureLanguage',
              ( ['in'], c_ulong, 'ulStream' ),
              ( ['retval', 'out'], POINTER(BSTR), 'bstrSubpictureLang' )),
    COMMETHOD([dispid(1560), helpstring(u'Gets an array of the DVD General Parameter Registers')], HRESULT, 'GetAllGPRMs',
              ( ['retval', 'out'], POINTER(VARIANT), 'vtGPRM' )),
    COMMETHOD([dispid(1559), helpstring(u'Gets an array of the DVD System Parameter Registers')], HRESULT, 'GetAllSPRMs',
              ( ['retval', 'out'], POINTER(VARIANT), 'vtSPRM' )),
    COMMETHOD([dispid(1579), helpstring(u'Checks the validity of the UOP')], HRESULT, 'UOPValid',
              ( ['in'], c_ulong, 'ulUOP' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bValid' )),
    COMMETHOD([dispid(1571), helpstring(u'Gets the number of available buttons'), 'propget'], HRESULT, 'ButtonsAvailable',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulButtonsAvailable' )),
    COMMETHOD([dispid(1570), helpstring(u'Gets the current button number'), 'propget'], HRESULT, 'CurrentButton',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulCurrentButton' )),
    COMMETHOD([dispid(1543), helpstring(u'Gets the number of available Audio streams'), 'propget'], HRESULT, 'AudioStreamsAvailable',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulAudioStreamsAvailable' )),
    COMMETHOD([dispid(1544), helpstring(u'Gets the current audio stream'), 'propget'], HRESULT, 'CurrentAudioStream',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulAudioStream' )),
    COMMETHOD([dispid(1544), helpstring(u'Gets the current audio stream'), 'propput'], HRESULT, 'CurrentAudioStream',
              ( ['in'], c_ulong, 'ulAudioStream' )),
    COMMETHOD([dispid(1545), helpstring(u'Gets the current subpicture stream'), 'propget'], HRESULT, 'CurrentSubpictureStream',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulSubpictureStream' )),
    COMMETHOD([dispid(1545), helpstring(u'Gets the current subpicture stream'), 'propput'], HRESULT, 'CurrentSubpictureStream',
              ( ['in'], c_ulong, 'ulSubpictureStream' )),
    COMMETHOD([dispid(1546), helpstring(u'Gets the number of available subpicture streams'), 'propget'], HRESULT, 'SubpictureStreamsAvailable',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulNumSubpictureStreams' )),
    COMMETHOD([dispid(1547), helpstring(u'Gets the state of the Subpicture display'), 'propget'], HRESULT, 'SubpictureOn',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bSubpictureON' )),
    COMMETHOD([dispid(1547), helpstring(u'Gets the state of the Subpicture display'), 'propput'], HRESULT, 'SubpictureOn',
              ( ['in'], VARIANT_BOOL, 'bSubpictureON' )),
    COMMETHOD([dispid(1549), helpstring(u'Get the number of available Angles'), 'propget'], HRESULT, 'AnglesAvailable',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulAnglesAvailable' )),
    COMMETHOD([dispid(1548), helpstring(u'Gets the current Angle'), 'propget'], HRESULT, 'CurrentAngle',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulAngle' )),
    COMMETHOD([dispid(1548), helpstring(u'Gets the current Angle'), 'propput'], HRESULT, 'CurrentAngle',
              ( ['in'], c_ulong, 'ulAngle' )),
    COMMETHOD([dispid(1567), helpstring(u'Gets the current Title'), 'propget'], HRESULT, 'CurrentTitle',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulTitle' )),
    COMMETHOD([dispid(1568), helpstring(u'Gets the current Chapter'), 'propget'], HRESULT, 'CurrentChapter',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulChapter' )),
    COMMETHOD([dispid(1569), helpstring(u'Gets the current Time'), 'propget'], HRESULT, 'CurrentTime',
              ( ['retval', 'out'], POINTER(BSTR), 'bstrTime' )),
    COMMETHOD([dispid(1538), helpstring(u'Sets the root directory containing the DVD-Video volume'), 'propput'], HRESULT, 'Root',
              ( ['in'], BSTR, 'pbstrPath' )),
    COMMETHOD([dispid(1538), helpstring(u'Sets the root directory containing the DVD-Video volume'), 'propget'], HRESULT, 'Root',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrPath' )),
    COMMETHOD([dispid(1573), helpstring(u'Gets the number of frames per second used by the current title'), 'propget'], HRESULT, 'FramesPerSecond',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulFps' )),
    COMMETHOD([dispid(1574), helpstring(u'Gets the current Domain'), 'propget'], HRESULT, 'CurrentDomain',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulDomain' )),
    COMMETHOD([dispid(1575), helpstring(u'Gets the number of available titles'), 'propget'], HRESULT, 'TitlesAvailable',
              ( ['retval', 'out'], POINTER(c_ulong), 'ulTitles' )),
    COMMETHOD([dispid(1576), helpstring(u'Gets the number of available volumes'), 'propget'], HRESULT, 'VolumesAvailable',
              ( ['retval', 'out'], POINTER(c_ulong), 'pulVolumes' )),
    COMMETHOD([dispid(1577), helpstring(u'Gets the current volume'), 'propget'], HRESULT, 'CurrentVolume',
              ( ['retval', 'out'], POINTER(c_ulong), 'pulVolume' )),
    COMMETHOD([dispid(1578), helpstring(u'Gets the current disc side'), 'propget'], HRESULT, 'CurrentDiscSide',
              ( ['retval', 'out'], POINTER(c_ulong), 'pulDiscSide' )),
    COMMETHOD([dispid(1581), helpstring(u'Gets the active state of the closed captioning service'), 'propget'], HRESULT, 'CCActive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bCCActive' )),
    COMMETHOD([dispid(1581), helpstring(u'Gets the active state of the closed captioning service'), 'propput'], HRESULT, 'CCActive',
              ( ['in'], VARIANT_BOOL, 'bCCActive' )),
    COMMETHOD([dispid(1580), helpstring(u'Gets the current closed captioning service'), 'propget'], HRESULT, 'CurrentCCService',
              ( ['retval', 'out'], POINTER(c_ulong), 'pulService' )),
    COMMETHOD([dispid(1580), helpstring(u'Gets the current closed captioning service'), 'propput'], HRESULT, 'CurrentCCService',
              ( ['in'], c_ulong, 'pulService' )),
    COMMETHOD([dispid(1584), helpstring(u'Gets a Unique identifier for the current DVD-Video disk'), 'propget'], HRESULT, 'UniqueID',
              ( ['retval', 'out'], POINTER(BSTR), 'pvtUniqueID' )),
    COMMETHOD([dispid(1585), helpstring(u'Gets ColorKey for the overlay'), 'propget'], HRESULT, 'ColorKey',
              ( ['retval', 'out'], POINTER(c_ulong), 'pClr' )),
    COMMETHOD([dispid(1585), helpstring(u'Gets ColorKey for the overlay'), 'propput'], HRESULT, 'ColorKey',
              ( ['in'], c_ulong, 'pClr' )),
]
################################################################
## code template for IMediaPlayerDvd implementation
##class IMediaPlayerDvd_Impl(object):
##    @property
##    def CurrentVolume(self):
##        u'Gets the current volume'
##        #return pulVolume
##
##    def TopPGSearch(self):
##        u'play current program'
##        #return 
##
##    @property
##    def CurrentTime(self):
##        u'Gets the current Time'
##        #return bstrTime
##
##    @property
##    def CurrentChapter(self):
##        u'Gets the current Chapter'
##        #return ulChapter
##
##    def ChapterPlayAutoStop(self, ulTitle, ulChapter, ulChaptersToPlay):
##        u'Playing a sequence of chapters in specified title'
##        #return 
##
##    def GetAllSPRMs(self):
##        u'Gets an array of the DVD System Parameter Registers'
##        #return vtSPRM
##
##    @property
##    def CurrentDomain(self):
##        u'Gets the current Domain'
##        #return ulDomain
##
##    def RightButtonSelect(self):
##        u'Selects the button to the right of current button'
##        #return 
##
##    def GoUp(self):
##        u'play current program chain '
##        #return 
##
##    @property
##    def CurrentTitle(self):
##        u'Gets the current Title'
##        #return ulTitle
##
##    def GetSubpictureLanguage(self, ulStream):
##        u'Gets the name of the Subpicture language'
##        #return bstrSubpictureLang
##
##    def _get(self):
##        u'Gets the current subpicture stream'
##        #return ulSubpictureStream
##    def _set(self, ulSubpictureStream):
##        u'Gets the current subpicture stream'
##    CurrentSubpictureStream = property(_get, _set, doc = _set.__doc__)
##
##    def UOPValid(self, ulUOP):
##        u'Checks the validity of the UOP'
##        #return bValid
##
##    def StillOff(self):
##        u'Releases any current still if there are no available buttons'
##        #return 
##
##    def _get(self):
##        u'Gets the state of the Subpicture display'
##        #return bSubpictureON
##    def _set(self, bSubpictureON):
##        u'Gets the state of the Subpicture display'
##    SubpictureOn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gets the current Angle'
##        #return ulAngle
##    def _set(self, ulAngle):
##        u'Gets the current Angle'
##    CurrentAngle = property(_get, _set, doc = _set.__doc__)
##
##    def TitlePlay(self, uiTitle):
##        u'Play title number 1-99'
##        #return 
##
##    def _get(self):
##        u'Gets ColorKey for the overlay'
##        #return pClr
##    def _set(self, pClr):
##        u'Gets ColorKey for the overlay'
##    ColorKey = property(_get, _set, doc = _set.__doc__)
##
##    def ResumeFromMenu(self):
##        u'Resume title playback'
##        #return 
##
##    def ButtonSelectAndActivate(self, uiButton):
##        u'Selects and activates specified button'
##        #return 
##
##    @property
##    def TotalTitleTime(self):
##        u'Gets a string containing the total time in the title (hh:mm:ss:ff)'
##        #return bstrTime
##
##    def LowerButtonSelect(self):
##        u'Selects the button below current button'
##        #return 
##
##    def GetNumberOfChapters(self, ulTitle):
##        u'Gets the number of chapters for the specified title'
##        #return ulNumChapters
##
##    def _get(self):
##        u'Gets the current audio stream'
##        #return ulAudioStream
##    def _set(self, ulAudioStream):
##        u'Gets the current audio stream'
##    CurrentAudioStream = property(_get, _set, doc = _set.__doc__)
##
##    def GetAllGPRMs(self):
##        u'Gets an array of the DVD General Parameter Registers'
##        #return vtGPRM
##
##    @property
##    def SubpictureStreamsAvailable(self):
##        u'Gets the number of available subpicture streams'
##        #return ulNumSubpictureStreams
##
##    @property
##    def TitlesAvailable(self):
##        u'Gets the number of available titles'
##        #return ulTitles
##
##    def BackwardScan(self, dwSpeed):
##        u'reverse play at the specified speed'
##        #return 
##
##    @property
##    def CurrentDiscSide(self):
##        u'Gets the current disc side'
##        #return pulDiscSide
##
##    def MenuCall(self, MenuID):
##        u'Play specified menu'
##        #return 
##
##    @property
##    def CurrentButton(self):
##        u'Gets the current button number'
##        #return ulCurrentButton
##
##    def ButtonActivate(self):
##        u'Activates the currentlt selected button'
##        #return 
##
##    def ForwardScan(self, dwSpeed):
##        u'forward play at the specified speed'
##        #return 
##
##    def _get(self):
##        u'Gets the active state of the closed captioning service'
##        #return bCCActive
##    def _set(self, bCCActive):
##        u'Gets the active state of the closed captioning service'
##    CCActive = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FramesPerSecond(self):
##        u'Gets the number of frames per second used by the current title'
##        #return ulFps
##
##    @property
##    def AnglesAvailable(self):
##        u'Get the number of available Angles'
##        #return ulAnglesAvailable
##
##    @property
##    def ButtonsAvailable(self):
##        u'Gets the number of available buttons'
##        #return ulButtonsAvailable
##
##    @property
##    def AudioStreamsAvailable(self):
##        u'Gets the number of available Audio streams'
##        #return ulAudioStreamsAvailable
##
##    def _get(self):
##        u'Sets the root directory containing the DVD-Video volume'
##        #return pbstrPath
##    def _set(self, pbstrPath):
##        u'Sets the root directory containing the DVD-Video volume'
##    Root = property(_get, _set, doc = _set.__doc__)
##
##    def TimePlay(self, uiTitle, bstrTime):
##        u'Play at specified time (hh:mm:ss:ff) within specified title'
##        #return 
##
##    def UpperButtonSelect(self):
##        u'Selects the button above current button'
##        #return 
##
##    def _get(self):
##        u'Gets the current closed captioning service'
##        #return pulService
##    def _set(self, pulService):
##        u'Gets the current closed captioning service'
##    CurrentCCService = property(_get, _set, doc = _set.__doc__)
##
##    def PrevPGSearch(self):
##        u'play previous program'
##        #return 
##
##    def ChapterPlay(self, uiTitle, uiChapter):
##        u'Play chapter number 1-99 of title 1-99'
##        #return 
##
##    def GetAudioLanguage(self, ulStream):
##        u'Gets the name of the Audio language'
##        #return bstrAudioLang
##
##    def TimeSearch(self, bstrTime):
##        u'play at specified time in current title'
##        #return 
##
##    def ChapterSearch(self, Chapter):
##        u'play at specified chapter in current title'
##        #return 
##
##    def LeftButtonSelect(self):
##        u'Selects the button to the left of current button'
##        #return 
##
##    @property
##    def VolumesAvailable(self):
##        u'Gets the number of available volumes'
##        #return pulVolumes
##
##    @property
##    def UniqueID(self):
##        u'Gets a Unique identifier for the current DVD-Video disk'
##        #return pvtUniqueID
##
##    def NextPGSearch(self):
##        u'play next program'
##        #return 
##

_MediaPlayerEvents._disp_methods_ = [
    DISPMETHOD([dispid(1505), helpstring(u'DVD related notifications')], None, 'DVDNotify',
               ( ['in'], c_int, 'EventCode' ),
               ( ['in'], c_int, 'EventParam1' ),
               ( ['in'], c_int, 'EventParam2' )),
    DISPMETHOD([dispid(3002), helpstring(u'Sent when the end of file is reached')], None, 'EndOfStream',
               ( ['in'], c_int, 'Result' )),
    DISPMETHOD([dispid(-602), helpstring(u'Sent when a key is pressed')], None, 'KeyDown',
               ( ['in'], c_short, 'KeyCode' ),
               ( ['in'], c_short, 'ShiftState' )),
    DISPMETHOD([dispid(-604), helpstring(u'Sent when a key is released')], None, 'KeyUp',
               ( ['in'], c_short, 'KeyCode' ),
               ( ['in'], c_short, 'ShiftState' )),
    DISPMETHOD([dispid(-603), helpstring(u'Sent when a character is entered')], None, 'KeyPress',
               ( ['in'], c_short, 'CharacterCode' )),
    DISPMETHOD([dispid(-606), helpstring(u'Sent when the mouse is moved')], None, 'MouseMove',
               ( ['in'], c_short, 'Button' ),
               ( ['in'], c_short, 'ShiftState' ),
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(-605), helpstring(u'Sent when a mouse button is pressed')], None, 'MouseDown',
               ( ['in'], c_short, 'Button' ),
               ( ['in'], c_short, 'ShiftState' ),
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(-607), helpstring(u'Sent when a mouse button is released')], None, 'MouseUp',
               ( ['in'], c_short, 'Button' ),
               ( ['in'], c_short, 'ShiftState' ),
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(-600), helpstring(u'Sent when a mouse button is clicked')], None, 'Click',
               ( ['in'], c_short, 'Button' ),
               ( ['in'], c_short, 'ShiftState' ),
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(-601), helpstring(u'Sent when a mouse button is double clicked')], None, 'DblClick',
               ( ['in'], c_short, 'Button' ),
               ( ['in'], c_short, 'ShiftState' ),
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_XPOS_PIXELS, 'x' ),
               ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_YPOS_PIXELS, 'y' )),
    DISPMETHOD([dispid(3011), helpstring(u'Sent when the control changes OpenState')], None, 'OpenStateChange',
               ( ['in'], c_int, 'OldState' ),
               ( ['in'], c_int, 'NewState' )),
    DISPMETHOD([dispid(3012), helpstring(u'Sent when the control changes PlayState')], None, 'PlayStateChange',
               ( ['in'], c_int, 'OldState' ),
               ( ['in'], c_int, 'NewState' )),
    DISPMETHOD([dispid(3001), helpstring(u'Sent when a synchronized command or URL is received')], None, 'ScriptCommand',
               ( ['in'], BSTR, 'scType' ),
               ( ['in'], BSTR, 'Param' )),
    DISPMETHOD([dispid(3003), helpstring(u'Sent when the control begins or ends buffering')], None, 'Buffering',
               ( ['in'], VARIANT_BOOL, 'Start' )),
    DISPMETHOD([dispid(3010), helpstring(u'Sent when the control has an error condition')], None, 'Error'),
    DISPMETHOD([dispid(3006), helpstring(u'Sent when a marker is reached')], None, 'MarkerHit',
               ( ['in'], c_int, 'MarkerNum' )),
    DISPMETHOD([dispid(3009), helpstring(u'Sent when the control encounters a problem')], None, 'Warning',
               ( ['in'], c_int, 'WarningType' ),
               ( ['in'], c_int, 'Param' ),
               ( ['in'], BSTR, 'Description' )),
    DISPMETHOD([dispid(3008), helpstring(u'Sent when a new stream is started in a channel')], None, 'NewStream'),
    DISPMETHOD([dispid(3004), helpstring(u'Sent when the control is disconnected from the server')], None, 'Disconnect',
               ( ['in'], c_int, 'Result' )),
    DISPMETHOD([dispid(-609), helpstring(u'Sent when the control changes ReadyState')], None, 'ReadyStateChange',
               ( ['in'], MPReadyStateConstants, 'ReadyState' )),
]
__all__ = [ 'mpWaiting', 'mpClipTitle', 'mpShowDialogOptions',
           'MPDisplayModeConstants', 'mpReadyStateUninitialized',
           'dvdMenu_Subpicture', 'IMediaPlayerDvd', 'mpPlaying',
           'mpClipAuthor', 'mpPaused', 'mpShowDialogStatistics',
           'mpFullScreen', 'mpDefaultSize', 'IMediaPlayer',
           'mpReadyStateLoading', 'mpClipRating',
           'MPShowDialogConstants', 'mpShowRating',
           'DVDMenuIDConstants', 'mpStopped', 'mpHalfSize',
           'mpBannerMoreInfo', 'MPPlayStateConstants', 'MediaPlayer',
           'mpTime', 'MPDisplaySizeConstants', 'mpWatermark',
           'mpShowTitle', 'mpReadyStateComplete',
           'mpShowDialogContextMenu', 'mpClipCopyright',
           'mpDoubleSize', 'dvdMenu_Audio', 'MPMoreInfoType',
           'mpBannerImage', 'dvdMenu_Root', 'mpScanForward',
           '_MediaPlayerEvents', 'mpShowCopyright', 'mpFrames',
           'mpClipURL', 'mpClosed', 'mpShowLogoIcon', 'mpBannerURL',
           'dvdMenu_Chapter', 'mpScanReverse', 'mpShowFilename',
           'mpOneFourthScreen', 'mpClipLogoIcon', 'mpShowDialogHelp',
           'MPReadyStateConstants', 'dvdMenu_Title',
           'mpReadyStateInteractive', 'IMediaPlayer2', 'mpShowURL',
           'mpShowAuthor', 'mpShowDescription', 'mpClipDescription',
           'mpOneHalfScreen', 'mpOneSixteenthScreen',
           'mpClipFilename', 'MPMediaInfoType', 'dvdMenu_Angle',
           'mpFitToSize']
from comtypes import _check_version; _check_version('', 1552995739.170624)
